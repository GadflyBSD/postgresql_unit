DROP FUNCTION IF EXISTS logic_upload_pictrue(JSON);CREATE FUNCTION logic_upload_pictrue(pictrue JSON)	RETURNS JSONAS $$DECLARE	uid_val INTEGER;	path_val VARCHAR(200);	md5_val VARCHAR(32);	sha1_val VARCHAR(40);	recip_val VARCHAR(15);	picture_id INTEGER;BEGIN	IF (json_extract_path_text(pictrue, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传图片用户UID不能为空!', 'code', 230);	ELSE		uid_val := json_extract_path_text(pictrue, 'uid');	END IF;	IF (json_extract_path_text(pictrue, 'path') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传图片路径不能为空!', 'code', 230);	ELSE		path_val := json_extract_path_text(pictrue, 'path');	END IF;	IF (json_extract_path_text(pictrue, 'md5') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传图片的MD5不能为空!', 'code', 230);	ELSE		md5_val := json_extract_path_text(pictrue, 'md5');	END IF;	IF (json_extract_path_text(pictrue, 'sha1') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传图片的SHA1不能为空!', 'code', 230);	ELSE		sha1_val := json_extract_path_text(pictrue, 'sha1');	END IF;	IF (json_extract_path_text(pictrue, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传图片者的IP不能为空!', 'code', 230);	ELSE		recip_val := json_extract_path_text(pictrue, 'recip');	END IF;	INSERT INTO base_picture (uid, "path", ext, filename, "type", md5, sha1, recip)	VALUES (uid_val, path_val, json_extract_path_text(pictrue, 'ext'), json_extract_path_text(pictrue, 'filename'),	        json_extract_path_text(pictrue, 'type'), md5_val, sha1_val, recip_val::CIDR)			RETURNING id INTO picture_id;	RETURN json_build_object(			'type', 'Success',			'msg', '用户上传图片成功!',			'picture_uid', uid_val,			'pid', picture_id,			'path', path_val	);	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'msg', '用户上传图片失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_upload_pictrue(JSON) IS '用户上传图片的操作';DROP FUNCTION IF EXISTS logic_user_reister(JSON);CREATE OR REPLACE FUNCTION logic_user_reister(	IN reister JSON) RETURNS JSONAS $$DECLARE	user_mobile VARCHAR(11);	user_password VARCHAR(100);	user_code VARCHAR(20);	user_recip VARCHAR(15);	is_register_smscode VARCHAR(10);	code_request_id VARCHAR(36);	verify_code JSON;	user_num INTEGER;	user_id INTEGER;	user_record RECORD;BEGIN	IF (json_extract_path_text(reister, 'mobile') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册手机不能为空!', 'code', 230);	ELSE		user_mobile := json_extract_path_text(reister, 'mobile');	END IF;	IF (json_extract_path_text(reister, 'password') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册密码不能为空!', 'code', 230);	ELSE		user_password := json_extract_path_text(reister, 'password');	END IF;	IF (json_extract_path_text(reister, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(reister, 'recip');	END IF;	SELECT c_value INTO is_register_smscode FROM base_config WHERE c_key = 'register_is_smscode';	IF (is_register_smscode = 'true') THEN		IF (json_extract_path_text(reister, 'code') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '用户注册手机验证码不能为空!', 'code', 230);		ELSE			user_code := json_extract_path_text(reister, 'code');		END IF;		IF (json_extract_path_text(reister, 'request_id') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '手机验证码发送请求不能为空!', 'code', 230);		ELSE			code_request_id := json_extract_path_text(reister, 'request_id');		END IF;		SELECT json_agg(logic_verify_smscode(json_build_object('request_id', code_request_id, 'code', user_code))) INTO verify_code;		IF(json_extract_path_text(verify_code->0, 'type') <> 'Success') THEN			RETURN verify_code->0;		END IF;	END IF;	SELECT count(*) INTO user_num FROM base_user WHERE mobile = user_mobile;	IF(user_num = 0) THEN		INSERT INTO base_user (mobile, clear_password, last_recip) VALUES (user_mobile, user_password, user_recip::CIDR) RETURNING id INTO user_id;		UPDATE base_user SET last_changes = 'Login', last_recip = user_recip::CIDR WHERE id = user_id;		SELECT keygen, uuid, mobile INTO user_record FROM base_user WHERE id = user_id;		PERFORM structure_redis(			        json_build_object(				        'key', 'webAPP_sessionStorage_userInfo:' || user_id,				        'type', 'info',				        'table', 'base_user_view',				        'where', 'uid = ' || user_id,				        'restful', 'api/User/getInfo'			        )		        );		PERFORM structure_redis(			        json_build_object(				        'key', 'webAPP_indexedDB_userList:allUserList',				        'table', 'base_user_list_view',				        'where', 'uid > 0',				        'restful', 'api/User/getList'			        )		        );		RETURN json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功注册并登录!',				'user', json_build_object(						'uid', user_id,						'uuid', user_record.uuid,						'keygen', user_record.keygen,						'mobile', user_record.mobile				),				'redis', json_build_array(						json_build_object(								'pk', user_id,								'key', 'webAPP_sessionStorage_userInfo:' || user_id,								'type', 'info',								'table', 'base_user_view',								'description', '注册用户详情数据'						),						json_build_object(								'pk', 'allUserList',								'type', 'list',								'key', 'webAPP_indexedDB_userList:allUserList',								'table', 'base_user_list_view',								'description', '所有用户列表数据'						)				)		);	ELSE		RETURN json_build_object('type', 'Error', 'message', '用户手机号码已经被注册!', 'code', 220);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户注册失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_reister(JSON) IS '用户注册的操作';DROP FUNCTION IF EXISTS logic_user_logout(JSON);CREATE OR REPLACE FUNCTION logic_user_logout(	IN user_id INTEGER) RETURNS JSONAS $$DECLARE	user_num INTEGER;BEGIN	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'Logout' WHERE id = user_id;		PERFORM structure_redis(json_build_object('key', 'webAPP_sessionStorage_userInfo:' || user_id));		RETURN json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功退出系统!',				'redis', json_build_array(						json_build_object(								'pk', user_id,								'action', 'remove',								'key', 'webAPP_sessionStorage_userInfo:' || user_id,								'table', 'base_user_view',								'description', '清除用户详情数据'						)				)		);	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户退出系统失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_logout(JSON) IS '用户退出系统的操作';DROP FUNCTION IF EXISTS logic_user_login(JSON);CREATE OR REPLACE FUNCTION logic_user_login(	IN logins JSON) RETURNS JSONAS $$DECLARE	user_mobile VARCHAR(11);	user_password VARCHAR(50);	recip VARCHAR(15);	user_num INTEGER;	user_record RECORD;BEGIN	IF (json_extract_path_text(logins, 'mobile') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册手机不能为空!', 'code', 230);	ELSE		user_mobile := json_extract_path_text(logins, 'mobile');	END IF;	IF (json_extract_path_text(logins, 'password') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册密码不能为空!', 'code', 230);	ELSE		user_password := json_extract_path_text(logins, 'password');	END IF;	IF (json_extract_path_text(logins, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册操作IP不能为空!', 'code', 230);	ELSE		recip := json_extract_path_text(logins, 'recip');	END IF;	SELECT count(*) INTO user_num FROM base_user WHERE mobile = user_mobile AND "password" = crypt(user_password, "password");	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'Login', last_recip = recip::CIDR WHERE mobile = user_mobile AND "password" = crypt(user_password, "password");		SELECT id, keygen, uuid INTO user_record FROM base_user WHERE mobile = user_mobile AND "password" = crypt(user_password, "password");		PERFORM structure_redis(			        json_build_object(                  'key', 'webAPP_sessionStorage_userInfo:' || user_record.id,                  'type', 'info',                  'table', 'base_user_view',                  'where', 'uid = ' || user_record.id					    )				    );		RETURN json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功登录!',				'user', json_build_object(						'uid', user_record.id,						'uuid', user_record.uuid,						'keygen', user_record.keygen,						'mobile', user_mobile				),				'redis', json_build_array(						json_build_object(								'pk', user_record.id,								'key', 'webAPP_sessionStorage_userInfo:' || user_record.id,								'type', 'info',								'table', 'base_user_view',								'description', '用户详情数据'						)				)		);	ELSE		RETURN json_build_object('type', 'Error', 'message', '用户手机号码或密码错误!', 'code', 220);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户登录失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_login(JSON) IS '用户登录的操作';DROP FUNCTION IF EXISTS logic_user_forgot_password(JSON);CREATE OR REPLACE FUNCTION logic_user_forgot_password(	IN forgotPassword JSON) RETURNS JSONAS $$DECLARE	user_mobile VARCHAR(11);	user_password VARCHAR(100);	user_code VARCHAR(20);	user_recip VARCHAR(15);	is_forgot_password_smscode VARCHAR(10);	code_request_id VARCHAR(36);	verify_code JSON;	user_num INTEGER;	user_record RECORD;BEGIN	IF (json_extract_path_text(forgotPassword, 'mobile') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '找回密码用手机号码不能为空!', 'code', 230);	ELSE		user_mobile := json_extract_path_text(forgotPassword, 'mobile');	END IF;	IF (json_extract_path_text(forgotPassword, 'password') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户新设定密码不能为空!', 'code', 230);	ELSE		user_password := json_extract_path_text(forgotPassword, 'password');	END IF;	IF (json_extract_path_text(forgotPassword, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(forgotPassword, 'recip');	END IF;	SELECT c_value INTO is_forgot_password_smscode FROM base_config WHERE c_key = 'forgot_password_is_smscode';	IF (is_forgot_password_smscode = 'true') THEN		IF (json_extract_path_text(forgotPassword, 'code') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '找回密码手机验证码不能为空!', 'code', 230);		ELSE			user_code := json_extract_path_text(forgotPassword, 'code');		END IF;		IF (json_extract_path_text(forgotPassword, 'request_id') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '手机验证码发送请求不能为空!', 'code', 230);		ELSE			code_request_id := json_extract_path_text(forgotPassword, 'request_id');		END IF;		SELECT json_agg(logic_verify_smscode(json_build_object('request_id', code_request_id, 'code', user_code))) INTO verify_code;		IF(json_extract_path_text(verify_code->0, 'type') <> 'Success') THEN			RETURN verify_code->0;		END IF;	END IF;	SELECT count(*) INTO user_num FROM base_user WHERE mobile = user_mobile;	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'forgotPassword', last_remark = user_password, last_recip = user_recip::CIDR WHERE mobile = user_mobile;		SELECT id, keygen, uuid INTO user_record FROM base_user WHERE mobile = user_mobile;		RETURN json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功找回密码并登录!',				'user', json_build_object(						'uid', user_record.id,						'uuid', user_record.uuid,						'keygen', user_record.keygen,						'mobile', user_mobile				),				'redis', json_build_array(						json_build_object(								'pk', user_record.id,								'key', 'webAPP_sessionStorage_userInfo:' || user_record.id,								'type', 'info',								'table', 'base_user_view',								'description', '用户详情数据'						)				)		);	ELSE		RETURN json_build_object('type', 'Error', 'message', '用户手机号码没有注册!', 'code', 220);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户找回密码失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_forgot_password(JSON) IS '用户找回密码的操作';DROP FUNCTION IF EXISTS logic_user_change_password(JSON);CREATE OR REPLACE FUNCTION logic_user_change_password(	IN setPassword JSON) RETURNS JSONAS $$DECLARE	user_id INTEGER;	user_password VARCHAR(100);	user_code VARCHAR(20);	user_recip VARCHAR(15);	is_set_password_smscode VARCHAR(50);	code_request_id VARCHAR(36);	verify_code JSON;	user_num INTEGER;	user_record RECORD;BEGIN	IF (json_extract_path_text(setPassword, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户UID不能为空!', 'code', 230);	ELSE		user_id := json_extract_path_text(setPassword, 'uid');	END IF;	IF (json_extract_path_text(setPassword, 'password') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户密码不能为空!', 'code', 230);	ELSE		user_password := json_extract_path_text(setPassword, 'password');	END IF;	IF (json_extract_path_text(setPassword, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户重置密码操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(setPassword, 'recip');	END IF;	SELECT c_value INTO is_set_password_smscode FROM base_config WHERE c_key = 'set_password_is_smscode';	IF (is_set_password_smscode = 'true') THEN		IF (json_extract_path_text(setPassword, 'code') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '找回密码手机验证码不能为空!', 'code', 230);		ELSE			user_code := json_extract_path_text(setPassword, 'code');		END IF;		IF (json_extract_path_text(setPassword, 'request_id') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '手机验证码发送请求不能为空!', 'code', 230);		ELSE			code_request_id := json_extract_path_text(setPassword, 'request_id');		END IF;		SELECT json_agg(logic_verify_smscode(json_build_object('request_id', code_request_id, 'code', user_code))) INTO verify_code;		IF(json_extract_path_text(verify_code->0, 'type') <> 'Success') THEN			RETURN verify_code->0;		END IF;	END IF;	SELECT count(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'changePassword', last_remark = user_password, last_recip = user_recip::CIDR WHERE id = user_id;		SELECT keygen, uuid, mobile INTO user_record FROM base_user WHERE id = user_id;		RETURN json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功重置密码并登录!',				'user', json_build_object(						'uid', user_id,						'uuid', user_record.uuid,						'keygen', user_record.keygen,						'mobile', user_record.mobile				),				'redis', json_build_array(						json_build_object(								'pk', user_id,								'key', 'webAPP_sessionStorage_userInfo:' || user_id,								'type', 'info',								'table', 'base_user_view',								'description', '用户详情数据'						)				)		);	ELSE		RETURN json_build_object('type', 'Error', 'message', '用户UID不存在!', 'code', 220);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户重置密码失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_change_password(JSON) IS '用户重置密码的操作';DROP FUNCTION IF EXISTS logic_user_set_headimg(JSON);CREATE OR REPLACE FUNCTION logic_user_set_headimg(	IN headimg JSON) RETURNS JSONAS $$DECLARE	user_id INTEGER;	user_recip VARCHAR(15);	user_num INTEGER;	pictrue JSON;	user_record RECORD;BEGIN	IF (json_extract_path_text(headimg, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户UID不能为空!', 'code', 230);	ELSE		user_id := json_extract_path_text(headimg, 'uid');	END IF;	IF (json_extract_path_text(headimg, 'path') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传头像路径不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(headimg, 'md5') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传头像的MD5不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(headimg, 'sha1') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传头像的SHA1不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(headimg, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户上传头像操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(headimg, 'recip');	END IF;	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		SELECT logic_upload_pictrue(				json_build_object(						'uid', user_id,						'type', 'headimg',						'path', json_extract_path_text(headimg, 'path'),						'md5', json_extract_path_text(headimg, 'md5'),						'sha1', json_extract_path_text(headimg, 'sha1'),						'recip', user_recip				)		) INTO pictrue;		IF (json_extract_path_text(pictrue, 'type') = 'Success') THEN			UPDATE base_user SET last_changes = 'setHeadimg', last_remark = json_extract_path_text(pictrue, 'pid'), last_recip = user_recip::CIDR WHERE id = user_id;			SELECT keygen, uuid, mobile INTO user_record FROM base_user WHERE id = user_id;			PERFORM structure_redis(			        	json_build_object(					        'key', 'webAPP_sessionStorage_userInfo:' || user_id,					        'type', 'info',					        'table', 'base_user_view',					        'where', 'uid = ' || user_id,					        'restful', 'api/User/getInfo'				        )			        );			PERFORM structure_redis(				        json_build_object(					        'key', 'webAPP_indexedDB_userList:allUserList',					        'table', 'base_user_list_view',					        'where', 'uid > 0',					        'restful', 'api/User/getList'				        )			        );			RETURN json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功设置头像!',					'user', json_build_object(							'uid', user_id,							'uuid', user_record.uuid,							'keygen', user_record.keygen,							'mobile', user_record.mobile					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'webAPP_sessionStorage_userInfo:' || user_id,									'type', 'info',									'table', 'base_user_view',									'description', '注册用户详情数据'							),							json_build_object(									'pk', 'allUserList',									'type', 'list',									'key', 'webAPP_indexedDB_userList:allUserList',									'table', 'base_user_list_view',									'description', '所有用户列表数据'							)					)			);		ELSE			RETURN pictrue;		END IF;	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户设置头像失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_set_headimg(JSON) IS '用户设置头像的操作';DROP FUNCTION IF EXISTS logic_user_change_nickname(JSON);CREATE OR REPLACE FUNCTION logic_user_change_nickname(	IN nickname JSON) RETURNS JSONAS $$DECLARE	user_id INTEGER;	user_nickname VARCHAR(50);	user_recip VARCHAR(15);	user_num INTEGER;	user_record RECORD;BEGIN	IF (json_extract_path_text(nickname, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户UID不能为空!', 'code', 230);	ELSE		user_id := json_extract_path_text(nickname, 'uid');	END IF;	IF (json_extract_path_text(nickname, 'nickname') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户昵称不能为空!', 'code', 230);	ELSE		user_nickname := json_extract_path_text(nickname, 'nickname');	END IF;	IF (json_extract_path_text(nickname, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户设置昵称操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(nickname, 'recip');	END IF;	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'changeNickname', last_remark = user_nickname, last_recip = user_recip::CIDR WHERE id = user_id;		SELECT keygen, uuid, mobile INTO user_record FROM base_user WHERE id = user_id;		PERFORM structure_redis(			        json_build_object(				        'key', 'webAPP_sessionStorage_userInfo:' || user_id,				        'type', 'info',				        'table', 'base_user_view',				        'where', 'uid = ' || user_id,				        'restful', 'api/User/getInfo'					        )				        );		PERFORM structure_redis(			        json_build_object(				        'key', 'webAPP_indexedDB_userList:allUserList',				        'table', 'base_user_list_view',				        'where', 'uid > 0',				        'restful', 'api/User/getList'					        )				        );		RETURN json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功设置昵称!',				'user', json_build_object(						'uid', user_id,						'uuid', user_record.uuid,						'keygen', user_record.keygen,						'mobile', user_record.mobile				),				'redis', json_build_array(						json_build_object(								'pk', user_id,								'key', 'webAPP_sessionStorage_userInfo:' || user_id,								'type', 'info',								'table', 'base_user_view',								'description', '注册用户详情数据'						),						json_build_object(								'pk', 'allUserList',								'type', 'list',								'key', 'webAPP_indexedDB_userList:allUserList',								'table', 'base_user_list_view',								'description', '所有用户列表数据'						)				)		);	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户设置昵称失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_change_nickname(JSON) IS '用户设置昵称的操作';DROP FUNCTION IF EXISTS logic_user_change_mobile(JSON);CREATE OR REPLACE FUNCTION logic_user_change_mobile(	IN mobile JSON) RETURNS JSONAS $$DECLARE	user_id INTEGER;	user_mobile VARCHAR(11);	user_code VARCHAR(6);	user_password VARCHAR(100);	user_recip VARCHAR(15);	is_change_mobile_smscode VARCHAR(10);	code_request_id VARCHAR(36);	verify_code JSON;	user_num INTEGER;	user_record RECORD;BEGIN	IF (json_extract_path_text(mobile, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户UID不能为空!', 'code', 230);	ELSE		user_id := json_extract_path_text(mobile, 'uid');	END IF;	IF (json_extract_path_text(mobile, 'mobile') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户重置手机号码不能为空!', 'code', 230);	ELSE		user_mobile := json_extract_path_text(mobile, 'mobile');	END IF;	IF (json_extract_path_text(mobile, 'password') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户登录密码不能为空!', 'code', 230);	ELSE		user_password := json_extract_path_text(mobile, 'password');	END IF;	IF (json_extract_path_text(mobile, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户重置操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(mobile, 'recip');	END IF;	SELECT c_value INTO is_change_mobile_smscode FROM base_config WHERE c_key = 'change_mobile_is_smscode';	IF (is_change_mobile_smscode = 'true') THEN		IF (json_extract_path_text(mobile, 'code') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '变更手机号码的验证码不能为空!', 'code', 230);		ELSE			user_code := json_extract_path_text(mobile, 'code');		END IF;		IF (json_extract_path_text(mobile, 'request_id') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '手机验证码发送请求不能为空!', 'code', 230);		ELSE			code_request_id := json_extract_path_text(mobile, 'request_id');		END IF;		SELECT json_agg(logic_verify_smscode(json_build_object('request_id', code_request_id, 'code', user_code))) INTO verify_code;		IF(json_extract_path_text(verify_code->0, 'type') <> 'Success') THEN			RETURN verify_code->0;		END IF;	END IF;	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id AND "password" = crypt(user_password, "password");	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'changeMobile', last_remark = user_mobile, last_recip = user_recip::CIDR WHERE id = user_id;		SELECT keygen, uuid INTO user_record FROM base_user WHERE id = user_id;		PERFORM structure_redis(			        json_build_object(				        'key', 'webAPP_sessionStorage_userInfo:' || user_id,				        'type', 'info',				        'table', 'base_user_view',				        'where', 'uid = ' || user_id,				        'restful', 'api/User/getInfo'			        )		        );		PERFORM structure_redis(			        json_build_object(				        'key', 'webAPP_indexedDB_userList:allUserList',				        'table', 'base_user_list_view',				        'where', 'uid > 0',				        'restful', 'api/User/getList'			        )		        );		RETURN json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功重置手机号码!',				'user', json_build_object(						'uid', user_id,						'uuid', user_record.uuid,						'keygen', user_record.keygen,						'mobile', user_mobile				),				'redis', json_build_array(						json_build_object(								'pk', user_id,								'key', 'webAPP_sessionStorage_userInfo:' || user_id,								'type', 'info',								'table', 'base_user_view',								'description', '注册用户详情数据'						),						json_build_object(								'pk', 'allUserList',								'type', 'list',								'key', 'webAPP_indexedDB_userList:allUserList',								'table', 'base_user_list_view',								'description', '所有用户列表数据'						)				)		);	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在或者密码错误!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户重置手机号码失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_change_mobile(JSON) IS '用户变更手机号码的操作';DROP FUNCTION IF EXISTS logic_user_gain_credit(JSON);CREATE OR REPLACE FUNCTION logic_user_gain_credit(	IN credit JSON) RETURNS JSONAS $$DECLARE	user_id INTEGER;	user_credit INTEGER;	gain_info VARCHAR(200);	user_recip VARCHAR(15);	user_num INTEGER;	user_record RECORD;BEGIN	IF (json_extract_path_text(credit, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户UID不能为空!', 'code', 230);	ELSE		user_id := json_extract_path_text(credit, 'uid');	END IF;	IF (json_extract_path_text(credit, 'credit') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户获得的积分数量不能为空!', 'code', 230);	ELSE		user_credit := json_extract_path_text(credit, 'credit');	END IF;	IF (json_extract_path_text(credit, 'info') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户获得积分的原因不能为空!', 'code', 230);	ELSE		gain_info := json_extract_path_text(credit, 'info');	END IF;	IF (json_extract_path_text(credit, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户积分操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(credit, 'recip');	END IF;	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'gainCredit', last_pk = user_credit, last_remark = gain_info, last_recip = user_recip::CIDR WHERE id = user_id;		SELECT keygen, uuid, mobile INTO user_record FROM base_user WHERE id = user_id;		PERFORM structure_redis(			        json_build_object(				        'key', 'webAPP_sessionStorage_userInfo:' || user_id,				        'type', 'info',				        'table', 'base_user_view',				        'where', 'uid = ' || user_id,				        'restful', 'api/User/getInfo'					        )				        );		PERFORM structure_redis(			        json_build_object(				        'key', 'webAPP_indexedDB_userList:allUserList',				        'table', 'base_user_list_view',				        'where', 'uid > 0',				        'restful', 'api/User/getList'					        )				        );		RETURN json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功获得积分!',				'user', json_build_object(						'uid', user_id,						'uuid', user_record.uuid,						'keygen', user_record.keygen,						'mobile', user_record.mobile				),				'redis', json_build_array(						json_build_object(								'pk', user_id,								'key', 'webAPP_sessionStorage_userInfo:' || user_id,								'type', 'info',								'table', 'base_user_view',								'description', '注册用户详情数据'						),						json_build_object(								'pk', 'allUserList',								'type', 'list',								'key', 'webAPP_indexedDB_userList:allUserList',								'table', 'base_user_list_view',								'description', '所有用户列表数据'						)				)		);	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户获得积分失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_gain_credit(JSON) IS '用户获得积分的操作';DROP FUNCTION IF EXISTS logic_user_apply_realname(JSON);CREATE OR REPLACE FUNCTION logic_user_apply_realname(	IN realname JSON) RETURNS JSONAS $$DECLARE	user_id INTEGER;	user_recip VARCHAR(15);	user_num INTEGER;	user_record RECORD;	front JSON;	back JSON;BEGIN	IF (json_extract_path_text(realname, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户UID不能为空!', 'code', 230);	ELSE		user_id := json_extract_path_text(realname, 'uid');	END IF;	IF (json_extract_path_text(realname, 'realname') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '真实姓名不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(realname, 'idcard') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '身份证号码不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(realname, 'front_path') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '身份证正面图片路径不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(realname, 'front_md5') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '身份证正面图片的MD5不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(realname, 'front_sha1') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '身份证正面图片的SHA1不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(realname, 'back_path') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '身份证背面图片路径不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(realname, 'back_md5') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '身份证背面图片的MD5不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(realname, 'back_sha1') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '身份证背面图片的SHA1不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(realname, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户实名认证申请操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(realname, 'recip');	END IF;	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		SELECT logic_upload_pictrue(			       json_build_object(				       'uid', user_id,					     'type', 'card_front',				       'path', json_extract_path_text(realname, 'front_path'),				       'md5', json_extract_path_text(realname, 'front_md5'),				       'sha1', json_extract_path_text(realname, 'front_sha1'),				       'recip', user_recip					       )				       ) INTO front;		SELECT logic_upload_pictrue(			       json_build_object(				       'uid', user_id,				       'type', 'card_back',				       'path', json_extract_path_text(realname, 'back_path'),				       'md5', json_extract_path_text(realname, 'back_md5'),				       'sha1', json_extract_path_text(realname, 'back_sha1'),				       'recip', user_recip					       )				       ) INTO back;		CASE			WHEN (json_extract_path_text(front, 'type') = 'Success' AND json_extract_path_text(back, 'type') = 'Success') THEN			INSERT INTO base_user_realname (uid, realname, nation, address, idcard, idcard_front, idcard_back, apply_recip)			VALUES (user_id, json_extract_path_text(realname, 'realname'), json_extract_path_text(realname, 'nation'),			        json_extract_path_text(realname, 'address'), json_extract_path_text(realname, 'idcard'), json_extract_path_text(front, 'pid')::INTEGER,			        json_extract_path_text(back, 'pid')::INTEGER, user_recip::CIDR);			SELECT keygen, uuid, mobile INTO user_record FROM base_user WHERE id = user_id;			PERFORM structure_redis(				        json_build_object(					        'key', 'webAPP_sessionStorage_userInfo:' || user_id,					        'type', 'info',					        'table', 'base_user_view',					        'where', 'uid = ' || user_id,					        'restful', 'api/User/getInfo'						        )					        );			PERFORM structure_redis(				        json_build_object(					        'key', 'webAPP_indexedDB_userList:allUserList',					        'table', 'base_user_list_view',					        'where', 'uid > 0',					        'restful', 'api/User/getList'						        )					        );			PERFORM structure_redis(				        json_build_object(					        'key', 'webManage_indexedDB_realname:allList',					        'table', 'base_user_realname',					        'where', 'id > 0',					        'restful', 'api/Realname/getAllList'						        )					        );			PERFORM structure_redis(				        json_build_object(					        'key', 'webManage_indexedDB_realname:applyList',					        'table', 'base_user_realname',					        'where', 'state = ''apply''',					        'restful', 'api/Realname/getApplyList'						        )					        );			RETURN json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功申请实名认证！',					'user', json_build_object(							'uid', user_id,							'uuid', user_record.uuid,							'keygen', user_record.keygen,							'mobile', user_record.mobile					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'webAPP_sessionStorage_userInfo:' || user_id,									'type', 'info',									'table', 'base_user_view',									'description', '注册用户详情数据'							),							json_build_object(									'pk', 'allUserList',									'type', 'list',									'key', 'webAPP_indexedDB_userList:allUserList',									'table', 'base_user_list_view',									'description', '所有用户列表数据'							)					)			);			WHEN (json_extract_path_text(back, 'type') <> 'Success') THEN			RETURN back;		ELSE			RETURN front;		END CASE ;	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);	END IF;END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_apply_realname(JSON) IS '用户实名认证申请的操作';DROP FUNCTION IF EXISTS logic_user_audit_realname(JSON);CREATE OR REPLACE FUNCTION logic_user_audit_realname(	IN audit JSON) RETURNS JSONAS $$DECLARE	audit_id INTEGER;	audit_record RECORD;	user_num INTEGER;	result realname_state;	user_recip VARCHAR(15);	user_record RECORD;BEGIN	IF (json_extract_path_text(audit, 'id') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户UID不能为空!', 'code', 230);	ELSE		audit_id := json_extract_path_text(audit, 'id');	END IF;	IF (json_extract_path_text(audit, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '审核操作者uid不能为空!', 'code', 230);	end if;	IF (json_extract_path_text(audit, 'state') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '审核结果不能为空!', 'code', 230);	ELSE		result := json_extract_path_text(audit, 'result');		IF (result = 'fail' AND json_extract_path_text(audit, 'cause') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '审核失败的原因不能为空!', 'code', 230);		end if;	END IF;	IF (json_extract_path_text(audit, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户实名认证审核操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(audit, 'recip');	END IF;	SELECT COUNT(*) AS num, uid INTO audit_record FROM base_user_realname WHERE id = audit_id;	IF(audit_record.num > 0) THEN		SELECT COUNT(*) INTO user_num FROM base_user WHERE id = audit_record.uid;		IF(user_num > 0) THEN			UPDATE base_user_realname SET state = result, cause = json_extract_path_text(audit, 'cause'),			                              audit_uid = json_extract_path_text(audit, 'uid'), audit_recip = user_recip			WHERE id = audit_id;			SELECT keygen, uuid, mobile INTO user_record FROM base_user WHERE id = audit_record.uid;			PERFORM structure_redis(				        json_build_object(					        'key', 'webAPP_sessionStorage_userInfo:' || audit_record.uid,					        'type', 'info',					        'table', 'base_user_view',					        'where', 'uid = ' || audit_record.uid,					        'restful', 'api/User/getInfo'				        )			        );			PERFORM structure_redis(				        json_build_object(					        'key', 'webAPP_indexedDB_userList:allUserList',					        'table', 'base_user_list_view',					        'where', 'uid > 0',					        'restful', 'api/User/getList'				        )			        );			PERFORM structure_redis(				        json_build_object(					        'key', 'webManage_indexedDB_realname:allList',					        'table', 'base_user_realname',					        'where', 'id > 0',					        'restful', 'api/Realname/getAllList'				        )			        );			PERFORM structure_redis(				        json_build_object(					        'key', 'webManage_indexedDB_realname:applyList',					        'table', 'base_user_realname',					        'where', 'state = ''apply''',					        'restful', 'api/Realname/getApplyList'				        )			        );			IF (result = 'fail') THEN				PERFORM structure_redis(					        json_build_object(						        'key', 'webManage_indexedDB_realname:failList',						        'table', 'base_user_realname',						        'where', 'state = ''fail''',						        'restful', 'api/Realname/getFailList'					        )				        );			ELSE				PERFORM structure_redis(					        json_build_object(						        'key', 'webManage_indexedDB_realname:successList',						        'table', 'base_user_realname',						        'where', 'state = ''success''',						        'restful', 'api/Realname/getSuccessList'							        )						        );			END IF;			RETURN json_build_object(					'code', 201,					'type', 'Success',					'message', '审核用户真实姓名操作成功！',					'user', json_build_object(							'uid', audit_record.uid,							'uuid', user_record.uuid,							'keygen', user_record.keygen,							'mobile', user_record.mobile					),					'redis', json_build_array(							json_build_object(									'pk', audit_record.uid,									'key', 'webAPP_sessionStorage_userInfo:' || audit_record.uid,									'type', 'info',									'table', 'base_user_view',									'description', '注册用户详情数据'							),							json_build_object(									'pk', 'allUserList',									'type', 'list',									'key', 'webAPP_indexedDB_userList:allUserList',									'table', 'base_user_list_view',									'description', '所有用户列表数据'							)					)			);		ELSE			RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);		END IF;	ELSE		RETURN json_build_object('type', 'Error', 'message', '实名认证请求ID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '审核用户真实姓名操作失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_audit_realname(JSON) IS '后台审核用户真实姓名的操作';DROP FUNCTION IF EXISTS logic_user_bind_weixin(JSON);CREATE OR REPLACE FUNCTION logic_user_bind_weixin(	IN weixin JSON) RETURNS JSONAS $$DECLARE	uid INTEGER;	weixin VARCHAR(20) DEFAULT 'app';	openid VARCHAR(100);	unionid VARCHAR(100);	nickname VARCHAR(200);	sex SMALLINT;	language VARCHAR(20);	city VARCHAR(20);	province VARCHAR(20);	country VARCHAR(20);	headimgurl TEXT;	privilege TEXT;BEGIN	IF (json_extract_path_text(weixin, 'openid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '微信用户OPENID不能为空!', 'code', 230);	ELSE		openid := json_extract_path_text(weixin, 'openid');	END IF;	IF (json_extract_path_text(weixin, 'weixin') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '微信用户关注微信号不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(weixin, 'nickname') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '微信用户昵称不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(weixin, 'headimgurl') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '微信用户头像不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(weixin, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户绑定微信操作IP不能为空!', 'code', 230);	END IF;	INSERT INTO base_bind_weixin (uid, weixin, openid, unionid, nickname, sex, "language", city, province, country, headimgurl, privilege, recip)	VALUES (json_extract_path_text(weixin, 'uid'), json_extract_path_text(weixin, 'weixin'), openid,	        json_extract_path_text(weixin, 'unionid'), json_extract_path_text(weixin, 'nickname'),	        json_extract_path_text(weixin, 'sex'), json_extract_path_text(weixin, 'language'),	        json_extract_path_text(weixin, 'city'), json_extract_path_text(weixin, 'province'),	        json_extract_path_text(weixin, 'country'), json_extract_path_text(weixin, 'headimgurl'),	        json_extract_path_text(weixin, 'privilege'), json_extract_path_text(weixin, 'recip'));	RETURN json_build_object('type', 'Success', 'message', '用户绑定微信操作成功!');	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户绑定微信操作失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_bind_weixin(JSON) IS '用户绑定微信的操作';DROP FUNCTION IF EXISTS logic_user_action_group(JSON);CREATE OR REPLACE FUNCTION logic_user_action_group(	IN userGroup JSON) RETURNS JSONAS $$DECLARE	gid_val INTEGER;	uid_val INTEGER;	group_num INTEGER;	user_recorde RECORD;	changes user_changes;BEGIN	IF (json_extract_path_text(userGroup, 'gid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户组ID不能为空!', 'code', 230);	ELSE		gid_val := json_extract_path_text(userGroup, 'gid');	END IF;	IF (json_extract_path_text(userGroup, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户UID不能为空!', 'code', 230);	ELSE		uid_val = json_extract_path_text(userGroup, 'uid');	END IF;	SELECT count(id) INTO group_num FROM base_user_group WHERE id = gid_val;	IF (group_num > 0) THEN		SELECT count(id) AS num, gid INTO user_recorde FROM base_user WHERE id = uid_val GROUP BY gid;		IF (user_recorde.num > 0) THEN			IF(user_recorde.gid @> ARRAY[gid_val]) THEN				changes := 'removeUserGroup';			ELSE				changes := 'removeUserGroup';			END IF;			UPDATE base_user SET last_changes = changes, last_pk = gid_val WHERE id = uid_val;			RETURN json_build_object('type', 'Success', 'message', '变更用户组操作成功!');		ELSE			RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);		END IF;	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户组ID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '变更用户组操作失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_user_action_group(JSON) IS '变更用户所在用户组的操作';DROP TYPE IF EXISTS groupMenuPageElement;CREATE TYPE groupMenuPageElement AS ENUM('group', 'menu', 'page', 'element');DROP FUNCTION IF EXISTS logic_group_menu_page_element(JSON, groupMenuPageElement);CREATE OR REPLACE FUNCTION logic_group_menu_page_element(	IN permission JSON,	IN table_names groupMenuPageElement) RETURNS JSONAS $$DECLARE	title_val VARCHAR(50);	identify_val VARCHAR(100);	upid_val INTEGER DEFAULT 0;	label_val VARCHAR(50);	subtitle_val VARCHAR(200) DEFAULT NULL;	description_val TEXT DEFAULT NULL;	icon_val VARCHAR(100) DEFAULT NULL;	classes_val VARCHAR(100) DEFAULT NULL;	sorts_val INTEGER DEFAULT 0;	gid_val INTEGER;	mid_val INTEGER;	pid_val INTEGER;	eid_val INTEGER;	sid_val INTEGER;	means_val element_means;	structure_val VARCHAR(100);	procedure_val VARCHAR(100);	image JSON;	image_json JSON;	image_id INTEGER DEFAULT NULL;	action_name VARCHAR(20);	return_permission JSON DEFAULT NULL;BEGIN	IF (json_extract_path_text(permission, 'title') IS NOT NULL) THEN		title_val := json_extract_path_text(permission, 'title');	ELSE		RETURN json_build_object('type', 'Error', 'message', '用户组名称或系统菜单名称不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(permission, 'identify') IS NOT NULL) THEN		identify_val := json_extract_path_text(permission, 'identify');	ELSE		RETURN json_build_object('type', 'Error', 'message', '英文标识不能为空!', 'code', 230);	END IF;	IF (json_extract_path_text(permission, 'upid') IS NOT NULL) THEN		upid_val := json_extract_path_text(permission, 'upid');	END IF;	IF (json_extract_path_text(permission, 'subtitle') IS NOT NULL) THEN		subtitle_val := json_extract_path_text(permission, 'subtitle');	END IF;	IF (json_extract_path_text(permission, 'description') IS NOT NULL) THEN		description_val := json_extract_path_text(permission, 'description');	END IF;	IF (json_extract_path_text(permission, 'icon') IS NOT NULL) THEN		icon_val := json_extract_path_text(permission, 'icon');	END IF;	IF (json_extract_path_text(permission, 'class') IS NOT NULL) THEN		classes_val := json_extract_path_text(permission, 'class');	END IF;	IF (json_extract_path_text(permission, 'sorts') IS NOT NULL) THEN		sorts_val := json_extract_path_text(permission, 'sorts')::INTEGER;	END IF;	IF (json_extract_path_text(permission, 'image') IS NOT NULL) THEN		image := json_extract_path_text(permission, 'image');		SELECT logic_upload_pictrue(			       json_build_object(				       'uid', json_extract_path_text(image, 'uid'),				       'type', table_names::VARCHAR,				       'path', json_extract_path_text(image, 'path'),				       'md5', json_extract_path_text(image, 'md5'),				       'sha1', json_extract_path_text(image, 'sha1'),				       'recip', json_extract_path_text(image, 'recip')					       )				       ) INTO image_json;		IF (lower(json_extract_path_text(image_json, 'type')) = 'success') THEN			image_id := json_extract_path_text(image_json, 'pid')::INTEGER;		ELSE			RETURN image_json;		END IF;	END IF;	CASE table_names		WHEN 'group' THEN			action_name := '系统用户组';			INSERT INTO base_user_group (upid, identify, title, subtitle, description, icon, classes, image, sorts)			VALUES(upid_val, identify_val, title_val, subtitle_val, description_val, icon_val, classes_val, image_id, sorts_val)					RETURNING id INTO gid_val;			INSERT INTO base_permission (gid, mid)			SELECT gid_val AS gid, base_menu.id AS mid FROM base_menu;			INSERT INTO base_permission (gid, mid, pid)			SELECT gid_val AS gid, base_pages.mid AS mid, base_pages.id AS pid FROM base_pages;			INSERT INTO base_permission (gid, mid, pid, eid)			SELECT gid_val AS gid, base_element.mid AS mid, base_element.pid AS pid, base_element.id AS eid FROM base_element;			SELECT json_agg(row_to_json(base_permission)) INTO return_permission FROM base_permission WHERE gid = gid_val;		WHEN 'page' THEN			action_name := '系统页面';			IF (json_extract_path_text(permission, 'mid') IS NOT NULL) THEN				mid_val := json_extract_path_text(permission, 'mid');			ELSE				RETURN json_build_object('type', 'Error', 'message', '系统菜单ID不能为空!', 'code', 230);			END IF;			INSERT INTO base_pages (mid, identify, title, subtitle, description, icon, classes, image, is_default)			VALUES(mid_val, identify_val, title_val, subtitle_val, description_val, icon_val, classes_val, image_id,			       json_extract_path_text(permission, 'is_default')::BOOLEAN)					RETURNING id INTO pid_val;			INSERT INTO base_permission (gid, mid, pid)			SELECT base_user_group.id AS gid, mid_val AS mid, pid_val AS pid FROM base_user_group;			SELECT json_agg(row_to_json(base_permission)) INTO return_permission FROM base_permission WHERE pid = pid_val;		WHEN 'element' THEN			action_name := '页面元素';			IF (json_extract_path_text(permission, 'pid') IS NULL) THEN				RETURN json_build_object('type', 'Error', 'message', '系统页面ID不能为空!', 'code', 230);			ELSE				pid_val := json_extract_path_text(permission, 'pid');			END IF;			IF (json_extract_path_text(permission, 'label') IS NULL) THEN				RETURN json_build_object('type', 'Error', 'message', '元素HTML标签不能为空!', 'code', 230);			ELSE				label_val := json_extract_path_text(permission, 'label');			END IF;			IF (json_extract_path_text(permission, 'means') IS NULL) THEN				RETURN json_build_object('type', 'Error', 'message', '页面元素所对应的数据结构或动作模型不能为空!', 'code', 230);			ELSE				means_val := json_extract_path_text(permission, 'means');				IF(means_val = 'structure') THEN					IF (json_extract_path_text(permission, 'structure') IS NULL) THEN						RETURN json_build_object('type', 'Error', 'message', '页面元素所对应的数据结构名称不能为空!', 'code', 230);					ELSE						structure_val := json_extract_path_text(permission, 'structure');					END IF;				ELSE					IF (json_extract_path_text(permission, 'procedure') IS NULL) THEN						RETURN json_build_object('type', 'Error', 'message', '页面元素动作模型所对应的存储过程名称不能为空!', 'code', 230);					ELSE						procedure_val := json_extract_path_text(permission, 'procedure');					END IF;				END IF;			END IF;			IF (json_extract_path_text(permission, 'mid') IS NULL) THEN				SELECT mid INTO mid_val FROM base_pages WHERE id = pid_val;			ELSE				mid_val := json_extract_path_text(permission, 'mid');			END IF;			INSERT INTO base_element (mid, pid, identify, "label", title, icon, classes, image, means)			VALUES(mid_val, pid_val, identify_val, label_val, title_val, icon_val, classes_val, image_id, means_val)					RETURNING id INTO eid_val;			IF(means_val = 'structure') THEN				INSERT INTO base_structure (mid, pid, eid, structure, source_type, source, filters, params)				VALUES (mid_val, pid_val, eid_val, structure_val, json_extract_path_text(permission, 'source_type')::source_type,				        json_extract_path_text(permission, 'source'), json_extract_path_text(permission, 'filters'),				        json_extract_path_text(permission, 'params')::JSON) RETURNING id INTO sid_val;				INSERT INTO base_field (sid, tables_name, field_name, field_type, field_comment, field_primary, field_notnull, field_isenum, field_option, placeholder, comment_as, is_show)				SELECT sid_val, st.tables_name, st.field_name, st.field_type, st.field_comment, st.field_primary, st.field_is_notnull,				       st.field_is_enum, st.field_options, st.field_comment, st.field_comment, (CASE WHEN st.field_primary THEN FALSE ELSE TRUE END)				FROM func_data_structure(structure_val) AS st;			ELSE				INSERT INTO base_action (mid, pid, eid, "action", "procedure")				VALUES (mid_val, pid_val, eid_val, json_extract_path_text(permission, 'action')::action_means, procedure_val);			END IF;			INSERT INTO base_permission (gid, mid, pid, eid)			SELECT base_user_group.id AS gid, mid_val AS mid, pid_val AS pid, eid_val AS eid FROM base_user_group;			SELECT json_agg(row_to_json(base_permission)) INTO return_permission FROM base_permission WHERE eid = eid_val;		ELSE			action_name := '系统菜单';			INSERT INTO base_menu (upid, identify, title, subtitle, description, icon, classes, image, sorts)			VALUES(upid_val, identify_val, title_val, subtitle_val, description_val, icon_val, classes_val, image_id, sorts_val)					RETURNING id INTO mid_val;			INSERT INTO base_permission (gid, mid) SELECT base_user_group.id AS gid, mid_val AS mid FROM base_user_group;			SELECT json_agg(row_to_json(base_permission)) INTO return_permission FROM base_permission WHERE mid = mid_val;	END CASE;	RETURN json_build_object('type', 'Success', 'message', '添加' || action_name || '操作成功，请继续配置该' || action_name || '权限!', 'permission', return_permission);	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '添加' || action_name || '操作失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_group_menu_page_element(JSON, groupMenuPageElement) IS '新增用户组、系统菜单、系统页面或页面元素操作';DROP FUNCTION IF EXISTS logic_permission(JSON);CREATE OR REPLACE FUNCTION logic_permission(	IN permission JSON) RETURNS JSONAS $$DECLARE	perm_array JSON[];	item JSON;BEGIN	SELECT array_agg(arrays) INTO perm_array FROM json_array_elements(permission) AS arrays;	FOREACH item IN ARRAY perm_array LOOP		IF (json_extract_path_text(item, 'id') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '权限配置数据ID不能为空!', 'code', 230);		END IF;		UPDATE base_permission SET allow = json_extract_path_text(item, 'allow')::BOOLEAN WHERE id = json_extract_path_text(item, 'id')::INTEGER;	END LOOP;	RETURN json_build_object('type', 'Success', 'message', '成功保存权限配置数据!');	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '保存权限配置数据操作失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_permission(JSON) IS '保存权限配置数据操作';