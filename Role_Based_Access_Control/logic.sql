/** # 用户上传图片存储过程 */DROP FUNCTION IF EXISTS logic_upload_pictrue(JSON);CREATE FUNCTION logic_upload_pictrue(pictrue JSON)	RETURNS JSONAS $$DECLARE	uid_val INTEGER;	path_val VARCHAR(200);	md5_val VARCHAR(32);	sha1_val VARCHAR(40);	recip_val VARCHAR(15);	picture_id INTEGER;BEGIN	IF (json_extract_path_text(pictrue, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传图片用户UID不能为空!', 'code', 230);	ELSE		uid_val := json_extract_path_text(pictrue, 'uid');	END IF;	IF (json_extract_path_text(pictrue, 'path') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传图片路径不能为空!', 'code', 230);	ELSE		path_val := json_extract_path_text(pictrue, 'path');	END IF;	IF (json_extract_path_text(pictrue, 'md5') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传图片的MD5不能为空!', 'code', 230);	ELSE		md5_val := json_extract_path_text(pictrue, 'md5');	END IF;	IF (json_extract_path_text(pictrue, 'sha1') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传图片的SHA1不能为空!', 'code', 230);	ELSE		sha1_val := json_extract_path_text(pictrue, 'sha1');	END IF;	IF (json_extract_path_text(pictrue, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '上传图片者的IP不能为空!', 'code', 230);	ELSE		recip_val := json_extract_path_text(pictrue, 'recip');	END IF;	INSERT INTO public.base_picture (uid, "path", ext, filename, "type", md5, sha1, recip)	VALUES (uid_val, path_val, json_extract_path_text(pictrue, 'ext'), json_extract_path_text(pictrue, 'filename'),	        json_extract_path_text(pictrue, 'type'), md5_val, sha1_val, recip_val::CIDR)			RETURNING id INTO picture_id;	RETURN json_build_object(			'type', 'Success',			'msg', '用户上传图片成功!',			'picture_uid', uid_val,			'pid', picture_id,			'path', path_val	);	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'msg', '用户上传图片失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户注册逻辑存储过程 SELECT logic_user_reister('注册手机号码', '注册密码', '注册IP'); */CREATE OR REPLACE FUNCTION logic_user_reister(	IN reister JSON			-- 用户注册数据) RETURNS JSONAS $$DECLARE	user_mobile VARCHAR(11);	user_password VARCHAR(100);	user_code VARCHAR(20);	user_recip VARCHAR(15);	code_request_id VARCHAR(36);	verify_code JSON;	user_num INTEGER;	mobiles VARCHAR(11);	uuids VARCHAR(64);	user_id INTEGER;	keygens VARCHAR(200);BEGIN	IF (json_extract_path_text(reister, 'mobile') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册手机不能为空!', 'code', 230);	ELSE		user_mobile := json_extract_path_text(reister, 'mobile');	END IF;	IF (json_extract_path_text(reister, 'code') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册手机验证码不能为空!', 'code', 230);	ELSE		user_code := json_extract_path_text(reister, 'code');	END IF;	IF (json_extract_path_text(reister, 'password') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册密码不能为空!', 'code', 230);	ELSE		user_password := json_extract_path_text(reister, 'password');	END IF;	IF (json_extract_path_text(reister, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(reister, 'recip');	END IF;	IF (json_extract_path_text(reister, 'request_id') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '手机验证码发送请求不能为空!', 'code', 230);	ELSE		code_request_id := json_extract_path_text(reister, 'request_id');	END IF;	SELECT json_agg(logic_verify_smscode(json_build_object('request_id', code_request_id, 'code', user_code))) INTO verify_code;	IF(json_extract_path_text(verify_code->0, 'type') = 'Success') THEN		SELECT count(*) INTO user_num FROM base_user WHERE mobile = user_mobile;		IF(user_num = 0) THEN			INSERT INTO base_user (mobile, clear_password, last_recip) VALUES (user_mobile, user_password, user_recip::CIDR) RETURNING id INTO user_id;			UPDATE base_user SET last_changes = 'Login', last_recip = user_recip::CIDR WHERE id = user_id;			SELECT keygen, uuid, mobile INTO keygens, uuids, mobiles FROM base_view_user WHERE uid = user_id;			PERFORM structure_redis(json_build_object(				                        'pk', user_id,				                        'storage', 'sessionStorage',				                        'store', 'userInfo',				                        'type', 'info',				                        'table', 'police_view_user',				                        'where', 'uid = ' || user_id					                        ));			PERFORM structure_redis(json_build_object(				                        'pk', 'masseserList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'user_group::JSONB @> json_build_array(''masses'')::JSONB'					                        ));			PERFORM structure_redis(json_build_object(				                        'pk', 'allUserList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'uid > 0'					                        ));			RETURN json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功注册并登录!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '注册用户详情数据'							),							json_build_object(									'pk', 'categoryList',									'type', 'list',									'storage', 'indexedDBStorage',									'store', 'setting',									'table', 'setting',									'key', 'indexedDBStorage_userList:categoryList',									'description', '案件分类列表数据'							),							json_build_object(									'pk', 'departmentList',									'type', 'list',									'storage', 'indexedDBStorage',									'store', 'setting',									'table', 'setting',									'key', 'indexedDBStorage_userList:departmentList',									'description', '职能部门列表数据'							),							json_build_object(									'pk', 'allUserList',									'type', 'list',									'storage', 'indexedDBStorage',									'store', 'userList',									'table', 'userList',									'key', 'indexedDBStorage_userList:allUserList',									'notice', json_build_array('policer'),									'description', '所有用户列表数据'							),							json_build_object(									'pk', 'masseserList',									'type', 'list',									'storage', 'indexedDBStorage',									'store', 'userList',									'table', 'userList',									'key', 'indexedDBStorage_userList:masseserList',									'notice', json_build_array('policer'),									'description', '普通用户列表数据'							)					)			);		ELSE			RETURN json_build_object('type', 'Error', 'message', '用户手机号码已经被注册!', 'code', 220);		END IF;	ELSE		RETURN verify_code->0;	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户注册失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户操作存储过程 SELECT logic_action_user(json_build_object( 		'mobile', '13354632000', 		'password', 'xx123456', 		'recip', '110.120.119.110' )); */CREATE OR REPLACE FUNCTION logic_action_user(	IN userinfo JSON			-- 用户注册数据) RETURNS JSONAS $$DECLARE	user_mobile VARCHAR(11);	user_password VARCHAR(100);	user_user_group JSON;	user_did INTEGER;	user_department VARCHAR(100);	user_recip VARCHAR(15);	user_num INTEGER;	user_id INTEGER;	user_row base_user%ROWTYPE;	returnJson JSON;	actionMessage VARCHAR(50);BEGIN	IF (json_extract_path_text(userinfo, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(userinfo, 'recip');	END IF;	IF (json_extract_path_text(userinfo, 'action_uid') IS NULL) THEN		actionMessage := '新增';		IF (json_extract_path_text(userinfo, 'mobile') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '用户注册手机不能为空!', 'code', 230);		ELSE			user_mobile := json_extract_path_text(userinfo, 'mobile');		END IF;		IF (json_extract_path_text(userinfo, 'password') IS NULL) THEN			RETURN json_build_object('type', 'Error', 'message', '用户注册密码不能为空!', 'code', 230);		ELSE			user_password := json_extract_path_text(userinfo, 'password');		END IF;		IF (json_extract_path_text(userinfo, 'user_group') IS NULL) THEN			user_user_group := json_build_array('masses');			user_did := 0;			user_department := NULL;		ELSE			user_user_group := json_extract_path_text(userinfo, 'user_group');			IF(user_user_group::JSONB @> json_build_array('department')::JSONB) THEN				IF (json_extract_path_text(userinfo, 'department') IS NULL) THEN					RETURN json_build_object('type', 'Error', 'message', actionMessage || '用户所属部门必须填写!', 'code', 230);				ELSE					user_did := json_extract_path_text(userinfo, 'did');					user_department := json_extract_path_text(userinfo, 'department');				END IF;			ELSE				user_did := 0;				user_department := NULL;			END IF;		END IF;		SELECT count(*) INTO user_num FROM base_user WHERE mobile = user_mobile;		IF(user_num = 0) THEN			INSERT INTO base_user (mobile, clear_password, realname, nickname, user_group, did, department, last_recip)			VALUES (user_mobile, user_password, json_extract_path_text(userinfo, 'realname'), json_extract_path_text(userinfo, 'nickname'),			        user_user_group, user_did, user_department, user_recip::CIDR) RETURNING id INTO user_id;		ELSE			RETURN json_build_object('type', 'Error', 'message', '用户手机号码已经被注册!', 'code', 220);		END IF;	ELSE		actionMessage := '修改';		user_id := json_extract_path_text(userinfo, 'action_uid');		SELECT * INTO user_row FROM base_user WHERE id = user_id;		IF (json_extract_path_text(userinfo, 'mobile') IS NULL) THEN			user_mobile := user_row.mobile;		ELSE			user_mobile := json_extract_path_text(userinfo, 'mobile');		END IF;		IF (json_extract_path_text(userinfo, 'password') IS NULL) THEN			user_password := user_row.password;		ELSE			user_password := json_extract_path_text(userinfo, 'password');		END IF;		IF (json_extract_path_text(userinfo, 'user_group') IS NULL) THEN			user_user_group := user_row.user_group;		ELSE			user_user_group := json_extract_path_text(userinfo, 'user_group');		END IF;		IF (json_extract_path_text(userinfo, 'did') IS NULL) THEN			user_did := user_row.did;		ELSE			user_did := json_extract_path_text(userinfo, 'did');		END IF;		IF (json_extract_path_text(userinfo, 'department') IS NULL) THEN			user_department := user_row.department;		ELSE			user_department := json_extract_path_text(userinfo, 'department');		END IF;		IF(user_user_group @> array['department'::VARCHAR]) THEN			IF(user_did = 0) THEN				RETURN json_build_object('type', 'Error', 'message', actionMessage || '用户所属部门必须填写!', 'code', 220);			END IF;		END IF;		UPDATE base_user SET mobile = user_mobile, clear_password = user_password, user_group = user_user_group, did = user_did,		                       department = user_department, last_recip = user_recip::CIDR WHERE id = user_id;	END IF;	PERFORM structure_redis(json_build_object(		                        'pk', 'masseserList',		                        'storage', 'indexedDBStorage',		                        'store', 'userList',		                        'table', 'police_view_user_list',		                        'where', 'user_group::JSONB @> json_build_array(''masses'')::JSONB'			                        ));	PERFORM structure_redis(json_build_object(		                        'pk', 'allUserList',		                        'storage', 'indexedDBStorage',		                        'store', 'userList',		                        'table', 'police_view_user_list',		                        'where', 'uid > 0'			                        ));	returnJson := json_build_object(			'code', 201,			'type', 'Success',			'message', '成功' || actionMessage || '普通用户!',			'user', json_build_object(					'uid', user_id,					'mobile', user_mobile			),			'redis', json_build_array(					json_build_object(							'table', 'userList',							'pk', 'masseserList',							'store', 'userList',							'type', 'list',							'key', 'indexedDBStorage_userList:masseserList',							'notice', json_build_array('policer'),							'description', '用户列表数据'					),					json_build_object(							'table', 'userList',							'pk', 'allUserList',							'store', 'userList',							'type', 'list',							'key', 'indexedDBStorage_userList:allUserList',							'notice', json_build_array('policer'),							'description', '用户列表数据'					)			)	);	IF(user_user_group::JSONB @> json_build_array('department')::JSONB) THEN		PERFORM structure_redis(json_build_object(			                        'pk', 'departmenterList',			                        'storage', 'indexedDBStorage',			                        'store', 'userList',			                        'table', 'police_view_user_list',			                        'where', 'user_group::JSONB @> json_build_array(''department'')::JSONB'				                        ));		returnJson := json_build_object(				'code', 201,				'type', 'Success',				'message', '成功' || actionMessage || '职能部门用户!',				'user', json_build_object(						'uid', user_id,						'mobile', user_mobile				),				'redis', json_build_array(						json_build_object(								'table', 'userList',								'pk', 'masseserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:masseserList',								'notice', json_build_array('policer'),								'description', '普通用户列表数据'						),						json_build_object(								'table', 'userList',								'pk', 'departmenterList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:departmenterList',								'notice', json_build_array('policer'),								'description', '职能部门用户列表数据'						),						json_build_object(								'table', 'userList',								'pk', 'allUserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:allUserList',								'notice', json_build_array('policer'),								'description', '用户列表数据'						)				)		);	END IF;	IF(user_user_group::JSONB @> json_build_array('police')::JSONB) THEN		PERFORM structure_redis(json_build_object(			                        'pk', 'policerList',			                        'storage', 'indexedDBStorage',			                        'store', 'userList',			                        'table', 'police_view_user_list',			                        'where', 'user_group::JSONB @> json_build_array(''police'')::JSONB'				                        ));		returnJson := json_build_object(				'code', 201,				'type', 'Success',				'message', '成功' || actionMessage || '警官用户!',				'user', json_build_object(						'uid', user_id,						'mobile', user_mobile				),				'redis', json_build_array(						json_build_object(								'table', 'userList',								'pk', 'masseserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:masseserList',								'notice', json_build_array('policer'),								'description', '普通用户列表数据'						),						json_build_object(								'table', 'userList',								'pk', 'policerList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:policerList',								'notice', json_build_array('policer'),								'description', '警官用户列表数据'						),						json_build_object(								'table', 'userList',								'pk', 'allUserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:allUserList',								'notice', json_build_array('policer'),								'description', '所有用户列表数据'						)				)		);	END IF;	RETURN returnJson;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', actionMessage || '用户失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户找回密码逻辑存储过程 SELECT logic_user_forgot_password('注册手机号码', '注册密码', '注册IP'); */CREATE OR REPLACE FUNCTION logic_user_forgot_password(	IN forgotPassword JSON			-- 用户注册数据) RETURNS JSONAS $$DECLARE	user_mobile VARCHAR(11);	user_password VARCHAR(100);	user_code VARCHAR(20);	user_recip VARCHAR(15);	code_request_id VARCHAR(36);	verify_code JSON;	user_num INTEGER;	mobiles VARCHAR(11);	uuids VARCHAR(64);	user_id INTEGER;	keygens VARCHAR(200);BEGIN	IF (json_extract_path_text(forgotPassword, 'mobile') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '找回密码用手机号码不能为空!', 'code', 230);	ELSE		user_mobile := json_extract_path_text(forgotPassword, 'mobile');	END IF;	IF (json_extract_path_text(forgotPassword, 'code') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '找回密码手机验证码不能为空!', 'code', 230);	ELSE		user_code := json_extract_path_text(forgotPassword, 'code');	END IF;	IF (json_extract_path_text(forgotPassword, 'password') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户新设定密码不能为空!', 'code', 230);	ELSE		user_password := json_extract_path_text(forgotPassword, 'password');	END IF;	IF (json_extract_path_text(forgotPassword, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(forgotPassword, 'recip');	END IF;	IF (json_extract_path_text(forgotPassword, 'request_id') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '手机验证码发送请求不能为空!', 'code', 230);	ELSE		code_request_id := json_extract_path_text(forgotPassword, 'request_id');	END IF;	SELECT json_agg(logic_verify_smscode(json_build_object('request_id', code_request_id, 'code', user_code))) INTO verify_code;	IF(json_extract_path_text(verify_code->0, 'type') = 'Success') THEN		SELECT count(*) INTO user_num FROM base_user WHERE mobile = user_mobile;		IF(user_num > 0) THEN			UPDATE base_user SET last_changes = 'forgotPassword', last_remark = user_password, last_recip = user_recip::CIDR WHERE mobile = user_mobile;			SELECT keygen, uuid, mobile INTO keygens, uuids, mobiles FROM base_user WHERE mobile = user_mobile;			RETURN json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功找回密码并登录!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							)					)			);		ELSE			RETURN json_build_object('type', 'Error', 'message', '用户手机号码没有注册!', 'code', 220);		END IF;	ELSE		RETURN verify_code->0;	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户找回密码失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户登录逻辑存储过程 SELECT logic_user_login('登录手机号码', '登录密码', '登录IP'); */CREATE OR REPLACE FUNCTION logic_user_login(	IN user_mobile VARCHAR(11),			-- 用户登录手机	IN user_password VARCHAR(100),	-- 用户登录密码	IN user_recip VARCHAR(15)				-- 用户操作IP) RETURNS JSONAS $$DECLARE	user_num INTEGER;	user_id INTEGER;	mobiles VARCHAR(11);	uuids VARCHAR(64);	keygens VARCHAR(200);BEGIN	SELECT count(*) INTO user_num FROM base_user WHERE mobile = user_mobile AND "password" = crypt(user_password, "password");	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'Login', last_recip = user_recip::CIDR WHERE mobile = user_mobile AND "password" = crypt(user_password, "password");		SELECT id, keygen, uuid, mobile INTO user_id, keygens, uuids, mobiles FROM base_user WHERE mobile = user_mobile AND "password" = crypt(user_password, "password");		PERFORM structure_queue(json_build_object('uid', user_id));		PERFORM structure_redis(json_build_object(			                        'pk', user_id,			                        'storage', 'sessionStorage',			                        'store', 'userInfo',			                        'type', 'info',			                        'table', 'police_view_user',			                        'where', 'uid = ' || user_id				                        ));		RETURN json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功登录!',				'user', json_build_object(						'uid', user_id,						'uuid', uuids,						'keygen', keygens,						'mobile', mobiles				),				'redis', json_build_array(						json_build_object(								'pk', user_id,								'key', 'sessionStorage_userInfo:' || user_id,								'type', 'info',								'storage', 'sessionStorage',								'store', 'userInfo',								'table', 'userInfo',								'description', '用户详情数据'						),						json_build_object(								'pk', 'categoryList',								'type', 'list',								'storage', 'indexedDBStorage',								'store', 'setting',								'table', 'setting',								'key', 'indexedDBStorage_setting:categoryList',								'notice', json_build_array('policer'),								'description', '案件分类列表数据'						),						json_build_object(								'pk', 'departmentList',								'type', 'list',								'storage', 'indexedDBStorage',								'store', 'setting',								'table', 'setting',								'key', 'indexedDBStorage_setting:departmentList',								'notice', json_build_array('policer'),								'description', '职能部门列表数据'						),						json_build_object(								'pk', 'allUserList',								'type', 'list',								'storage', 'indexedDBStorage',								'store', 'userList',								'table', 'userList',								'key', 'indexedDBStorage_userList:allUserList',								'notice', json_build_array('policer'),								'description', '职能部门列表数据'						),						json_build_object(								'pk', 'menuList',								'type', 'list',								'storage', 'indexedDBStorage',								'store', 'setting',								'table', 'setting',								'key', 'indexedDBStorage_setting:menuList',								'notice', json_build_array('policer'),								'description', '系统管理菜单列表数据'						)				)		);	ELSE		RETURN json_build_object('type', 'Error', 'message', '用户手机号码或密码错误!', 'code', 220);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户登录失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户退出系统逻辑存储过程 SELECT logic_user_logout('用户ID'); */CREATE OR REPLACE FUNCTION logic_user_logout(	IN user_id INTEGER							-- 用户ID) RETURNS JSONAS $$DECLARE	user_num INTEGER;	socket_fd INTEGER;BEGIN	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		SELECT fd INTO socket_fd FROM base_socket WHERE uid = user_id LIMIT 1;		UPDATE base_user SET last_changes = 'Logout' WHERE id = user_id;		PERFORM structure_redis(json_build_object(			                        'pk', user_id,			                        'storage', 'sessionStorage',			                        'store', 'userInfo'				                        ));		RETURN json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功退出系统!',				'redis', json_build_array(						json_build_object(								'table', 'userInfo',								'pk', user_id,								'action', 'remove',								'key', 'sessionStorage_userInfo:' || user_id,								'storage', 'sessionStorage',								'store', 'userInfo',								'type', 'delete',								'description', '清除用户详情数据'						),						json_build_object(								'pk', socket_fd || '-' || user_id,								'type', 'delete',								'action', 'remove',								'store', 'webSocket',								'table', 'webSocket',								'storage', 'sessionStorage',								'key', 'sessionStorage_webSocket:' || socket_fd || '-' || user_id,								'description', '当前用户Socket数据'						),						json_build_object(								'pk', 'onlineAllUser',								'type', 'delete',								'action', 'remove',								'store', 'userList',								'table', 'userList',								'storage', 'sessionStorage',								'key', 'sessionStorage_userList:onlineAllUser',								'description', '所有在线用户列表数据'						),						json_build_object(								'pk', 'onlineMasseser',								'type', 'delete',								'action', 'remove',								'store', 'userList',								'table', 'userList',								'storage', 'sessionStorage',								'key', 'sessionStorage_userList:onlineMasseser',								'description', '所有在线普通用户列表数据'						),						json_build_object(								'pk', 'onlineDepartmenter',								'type', 'delete',								'action', 'remove',								'store', 'userList',								'table', 'userList',								'storage', 'sessionStorage',								'key', 'sessionStorage_userList:onlineDepartmenter',								'notice', json_build_array('policer'),								'description', '所有在线职能部门用户列表数据'						),						json_build_object(								'pk', 'onlinePolicer',								'type', 'delete',								'action', 'remove',								'store', 'userList',								'table', 'userList',								'storage', 'sessionStorage',								'key', 'sessionStorage_userList:onlinePolicer',								'notice', json_build_array('policer'),								'description', '所有在线警官用户列表数据'						)				)		);	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户退出系统失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户重置密码逻辑存储过程 SELECT logic_user_forgot_password('注册手机号码', '注册密码', '注册IP'); */CREATE OR REPLACE FUNCTION logic_user_set_password(	IN forgotPassword JSON			-- 用户注册数据) RETURNS JSONAS $$DECLARE	user_mobile VARCHAR(11);	user_password VARCHAR(100);	user_code VARCHAR(20);	user_recip VARCHAR(15);	code_request_id VARCHAR(36);	verify_code JSON;	user_num INTEGER;	mobiles VARCHAR(11);	uuids VARCHAR(64);	user_id INTEGER;	keygens VARCHAR(200);BEGIN	IF (json_extract_path_text(forgotPassword, 'mobile') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户手机不能为空!', 'code', 230);	ELSE		user_mobile := json_extract_path_text(forgotPassword, 'mobile');	END IF;	IF (json_extract_path_text(forgotPassword, 'code') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '手机验证码不能为空!', 'code', 230);	ELSE		user_code := json_extract_path_text(forgotPassword, 'code');	END IF;	IF (json_extract_path_text(forgotPassword, 'password') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户密码不能为空!', 'code', 230);	ELSE		user_password := json_extract_path_text(forgotPassword, 'password');	END IF;	IF (json_extract_path_text(forgotPassword, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户注册操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(forgotPassword, 'recip');	END IF;	IF (json_extract_path_text(forgotPassword, 'request_id') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '手机验证码发送请求不能为空!', 'code', 230);	ELSE		code_request_id := json_extract_path_text(forgotPassword, 'request_id');	END IF;	SELECT json_agg(logic_verify_smscode(json_build_object('request_id', code_request_id, 'code', user_code))) INTO verify_code;	IF(json_extract_path_text(verify_code->0, 'type') = 'Success') THEN		SELECT count(*) INTO user_num FROM base_user WHERE mobile = user_mobile;		IF(user_num > 0) THEN			UPDATE base_user SET last_changes = 'setPassword', last_remark = user_password, last_recip = user_recip::CIDR WHERE mobile = user_mobile;			SELECT keygen, uuid, mobile INTO keygens, uuids, mobiles FROM base_user WHERE mobile = user_mobile;			RETURN json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功重置密码并登录!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							)					)			);		ELSE			RETURN json_build_object('type', 'Error', 'message', '用户手机号码没有注册!', 'code', 220);		END IF;	ELSE		RETURN verify_code->0;	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户重置密码失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户设置头像逻辑存储过程 SELECT logic_user_set_headimg('用户UID', '头像图片ID', '操作者IP'); */CREATE OR REPLACE FUNCTION logic_user_set_headimg(	IN user_id INTEGER,					-- 用户注册手机	IN user_headimg INTEGER,		-- 用户注册密码	IN user_recip VARCHAR(15)		-- 用户操作IP) RETURNS JSONAS $$DECLARE	user_num INTEGER;	mobiles VARCHAR(11);	uuids VARCHAR(64);	userGroup JSON;	keygens VARCHAR(200);	return_val JSON;BEGIN	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'setHeadimg', last_remark = user_headimg, last_recip = user_recip::CIDR WHERE id = user_id;		SELECT keygen, uuid, mobile, user_group INTO keygens, uuids, mobiles, userGroup FROM base_user WHERE id = user_id;		PERFORM structure_redis(json_build_object(			                        'pk', user_id,			                        'storage', 'sessionStorage',			                        'store', 'userInfo',			                        'type', 'info',			                        'table', 'police_view_user',			                        'where', 'uid = ' || user_id				                        ));		PERFORM structure_redis(json_build_object(			                        'pk', 'masseserList',			                        'storage', 'indexedDBStorage',			                        'store', 'userList',			                        'table', 'police_view_user_list',			                        'where', 'user_group::JSONB @> json_build_array(''masses'')::JSONB'				                        ));		PERFORM structure_redis(json_build_object(			                        'pk', 'allUserList',			                        'storage', 'indexedDBStorage',			                        'store', 'userList',			                        'table', 'police_view_user_list',			                        'where', 'uid > 0'				                        ));		return_val := json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功设置头像!',				'user', json_build_object(						'uid', user_id,						'uuid', uuids,						'keygen', keygens,						'mobile', mobiles				),				'redis', json_build_array(						json_build_object(								'pk', user_id,								'key', 'sessionStorage_userInfo:' || user_id,								'type', 'info',								'storage', 'sessionStorage',								'store', 'userInfo',								'table', 'userInfo',								'description', '用户详情数据'						),						json_build_object(								'table', 'userList',								'pk', 'masseserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:masseserList',								'notice', json_build_array('policer'),								'description', '普通用户列表数据'						),						json_build_object(								'table', 'userList',								'pk', 'allUserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:allUserList',								'notice', json_build_array('policer'),								'description', '所有用户列表数据'						)				)		);		IF(userGroup::JSONB @> json_build_array('department')::JSONB) THEN			PERFORM structure_redis(json_build_object(				                        'pk', 'departmenterList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'user_group::JSONB @> json_build_array(''department'')::JSONB'					                        ));			return_val := json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功设置头像!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							),							json_build_object(									'table', 'userList',									'pk', 'masseserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:masseserList',									'notice', json_build_array('policer'),									'description', '普通用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'departmenterList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:departmenterList',									'notice', json_build_array('policer'),									'description', '职能部门用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'allUserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:allUserList',									'notice', json_build_array('policer'),									'description', '所有用户列表数据'							)					)			);		END IF;		IF(userGroup::JSONB @> json_build_array('police')::JSONB) THEN			PERFORM structure_redis(json_build_object(				                        'pk', 'policerList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'user_group::JSONB @> json_build_array(''police'')::JSONB'					                        ));			return_val := json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功设置头像!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							),							json_build_object(									'table', 'userList',									'pk', 'masseserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:masseserList',									'notice', json_build_array('policer'),									'description', '普通用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'policerList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:policerList',									'notice', json_build_array('policer'),									'description', '警官用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'allUserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:allUserList',									'notice', json_build_array('policer'),									'description', '所有用户列表数据'							)					)			);		END IF;		RETURN return_val;	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户设置头像失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户设置昵称逻辑存储过程 SELECT logic_user_set_nickname('用户UID, '用户昵称', '操作者IP'); */CREATE OR REPLACE FUNCTION logic_user_set_nickname(	IN user_id INTEGER,							-- 用户注册手机	IN user_nickname VARCHAR(50),		-- 用户注册密码	IN user_recip VARCHAR(15)				-- 用户操作IP) RETURNS JSONAS $$DECLARE	user_num INTEGER;	mobiles VARCHAR(11);	uuids VARCHAR(64);	keygens VARCHAR(200);	userGroup JSON;	return_val JSON;BEGIN	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'setNickname', last_remark = user_nickname, last_recip = user_recip::CIDR WHERE id = user_id;		SELECT keygen, uuid, mobile, user_group INTO keygens, uuids, mobiles, userGroup FROM base_user WHERE id = user_id;		PERFORM structure_redis(json_build_object(			                        'pk', user_id,			                        'storage', 'sessionStorage',			                        'store', 'userInfo',			                        'type', 'info',			                        'table', 'police_view_user',			                        'where', 'uid = ' || user_id				                        ));		PERFORM structure_redis(json_build_object(			                        'pk', 'masseserList',			                        'storage', 'indexedDBStorage',			                        'store', 'userList',			                        'table', 'police_view_user_list',			                        'where', 'user_group::JSONB @> json_build_array(''masses'')::JSONB'				                        ));		PERFORM structure_redis(json_build_object(			                        'pk', 'allUserList',			                        'storage', 'indexedDBStorage',			                        'store', 'userList',			                        'table', 'police_view_user_list',			                        'where', 'uid > 0'				                        ));		return_val := json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功设置昵称!',				'user', json_build_object(						'uid', user_id,						'uuid', uuids,						'keygen', keygens,						'mobile', mobiles				),				'redis', json_build_array(						json_build_object(								'pk', user_id,								'key', 'sessionStorage_userInfo:' || user_id,								'type', 'info',								'storage', 'sessionStorage',								'store', 'userInfo',								'table', 'userInfo',								'description', '用户详情数据'						),						json_build_object(								'table', 'userList',								'pk', 'masseserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:masseserList',								'notice', json_build_array('policer'),								'description', '普通用户列表数据'						),						json_build_object(								'table', 'userList',								'pk', 'allUserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:allUserList',								'notice', json_build_array('policer'),								'description', '所有用户列表数据'						)				)		);		IF(userGroup::JSONB @> json_build_array('department')::JSONB) THEN			PERFORM structure_redis(json_build_object(				                        'pk', 'departmenterList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'user_group::JSONB @> json_build_array(''department'')::JSONB'					                        ));			return_val := json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功设置昵称!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							),							json_build_object(									'table', 'userList',									'pk', 'masseserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:masseserList',									'notice', json_build_array('policer'),									'description', '普通用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'departmenterList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:departmenterList',									'notice', json_build_array('policer'),									'description', '职能部门用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'allUserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:allUserList',									'notice', json_build_array('policer'),									'description', '所有用户列表数据'							)					)			);		END IF;		IF(userGroup::JSONB @> json_build_array('police')::JSONB) THEN			PERFORM structure_redis(json_build_object(				                        'pk', 'policerList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'user_group::JSONB @> json_build_array(''police'')::JSONB'					                        ));			return_val := json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功设置昵称!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							),							json_build_object(									'table', 'userList',									'pk', 'masseserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:masseserList',									'notice', json_build_array('policer'),									'description', '普通用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'policerList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:policerList',									'notice', json_build_array('policer'),									'description', '警官用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'allUserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:allUserList',									'notice', json_build_array('policer'),									'description', '所有用户列表数据'							)					)			);		END IF;		RETURN return_val;	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户设置昵称失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户设置真实姓名逻辑存储过程 SELECT logic_user_set_realname('用户UID', '真实姓名', '操作者IP'); */CREATE OR REPLACE FUNCTION logic_user_set_realname(	IN user_id INTEGER,							-- 用户注册手机	IN user_realname VARCHAR(50),		-- 用户注册密码	IN user_recip VARCHAR(15)				-- 用户操作IP) RETURNS JSONAS $$DECLARE	user_num INTEGER;	mobiles VARCHAR(11);	uuids VARCHAR(64);	keygens VARCHAR(200);	userGroup JSON;	return_val JSON;BEGIN	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'setRealname', last_remark = user_realname, last_recip = user_recip::CIDR WHERE id = user_id;		SELECT keygen, uuid, mobile, user_group INTO keygens, uuids, mobiles, userGroup FROM base_user WHERE id = user_id;		PERFORM structure_redis(json_build_object(			                        'pk', user_id,			                        'storage', 'sessionStorage',			                        'store', 'userInfo',			                        'table', 'police_view_user',			                        'where', 'uid = ' || user_id				                        ));		PERFORM structure_redis(json_build_object(			                        'pk', 'masseserList',			                        'storage', 'indexedDBStorage',			                        'store', 'userList',			                        'table', 'police_view_user_list',			                        'where', 'user_group::JSONB @> json_build_array(''masses'')::JSONB'				                        ));		PERFORM structure_redis(json_build_object(			                        'pk', 'allUserList',			                        'storage', 'indexedDBStorage',			                        'store', 'userList',			                        'table', 'police_view_user_list',			                        'where', 'uid > 0'				                        ));		return_val := json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功设置真实姓名!',				'user', json_build_object(						'uid', user_id,						'uuid', uuids,						'keygen', keygens,						'mobile', mobiles				),				'redis', json_build_array(						json_build_object(								'pk', user_id,								'key', 'sessionStorage_userInfo:' || user_id,								'type', 'info',								'storage', 'sessionStorage',								'store', 'userInfo',								'table', 'userInfo',								'description', '用户详情数据'						),						json_build_object(								'table', 'userList',								'pk', 'masseserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:masseserList',								'notice', json_build_array('policer'),								'description', '普通用户列表数据'						),						json_build_object(								'table', 'userList',								'pk', 'allUserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:allUserList',								'notice', json_build_array('policer'),								'description', '所有用户列表数据'						)				)		);		IF(userGroup::JSONB @> json_build_array('department')::JSONB) THEN			PERFORM structure_redis(json_build_object(				                        'pk', 'departmenterList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'user_group::JSONB @> json_build_array(''department'')::JSONB'					                        ));			return_val := json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功设置真实姓名!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							),							json_build_object(									'table', 'userList',									'pk', 'masseserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:masseserList',									'notice', json_build_array('policer'),									'description', '普通用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'departmenterList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:departmenterList',									'notice', json_build_array('policer'),									'description', '职能部门用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'allUserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:allUserList',									'notice', json_build_array('policer'),									'description', '所有用户列表数据'							)					)			);		END IF;		IF(userGroup::JSONB @> json_build_array('police')::JSONB) THEN			PERFORM structure_redis(json_build_object(				                        'pk', 'policerList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'user_group::JSONB @> json_build_array(''police'')::JSONB'					                        ));			return_val := json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功设置真实姓名!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							),							json_build_object(									'table', 'userList',									'pk', 'masseserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:masseserList',									'notice', json_build_array('policer'),									'description', '普通用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'policerList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:policerList',									'notice', json_build_array('policer'),									'description', '警官用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'allUserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:allUserList',									'notice', json_build_array('policer'),									'description', '所有用户列表数据'							)					)			);		END IF;		RETURN return_val;	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户设置真实姓名失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户设置手机逻辑存储过程 SELECT logic_user_set_mobile('用户UID', '新绑定的手机号码', '操作者IP'); */CREATE OR REPLACE FUNCTION logic_user_set_mobile(	IN setMobile JSON) RETURNS JSONAS $$DECLARE	user_id INTEGER;	user_mobile VARCHAR(11);	user_code VARCHAR(6);	user_password VARCHAR(100);	user_recip VARCHAR(15);	code_request_id VARCHAR(36);	verify_code JSON;	user_num INTEGER;	mobiles VARCHAR(11);	uuids VARCHAR(64);	keygens VARCHAR(200);	userGroup JSON;	return_val JSON;BEGIN	IF (json_extract_path_text(setMobile, 'uid') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户UID不能为空!', 'code', 230);	ELSE		user_id := json_extract_path_text(setMobile, 'uid');	END IF;	IF (json_extract_path_text(setMobile, 'mobile') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户重置手机号码不能为空!', 'code', 230);	ELSE		user_mobile := json_extract_path_text(setMobile, 'mobile');	END IF;	IF (json_extract_path_text(setMobile, 'code') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户重置手机验证码不能为空!', 'code', 230);	ELSE		user_code := json_extract_path_text(setMobile, 'code');	END IF;	IF (json_extract_path_text(setMobile, 'password') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户登录密码不能为空!', 'code', 230);	ELSE		user_password := json_extract_path_text(setMobile, 'password');	END IF;	IF (json_extract_path_text(setMobile, 'recip') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '用户重置操作IP不能为空!', 'code', 230);	ELSE		user_recip := json_extract_path_text(setMobile, 'recip');	END IF;	IF (json_extract_path_text(setMobile, 'request_id') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '手机验证码发送请求不能为空!', 'code', 230);	ELSE		code_request_id := json_extract_path_text(setMobile, 'request_id');	END IF;	SELECT json_agg(logic_verify_smscode(json_build_object('request_id', code_request_id, 'code', user_code))) INTO verify_code;	IF(json_extract_path_text(verify_code->0, 'type') = 'Success') THEN		SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;		IF(user_num > 0) THEN			UPDATE base_user SET last_changes = 'setMobile', last_remark = user_mobile, last_recip = user_recip::CIDR WHERE id = user_id;			SELECT keygen, uuid, mobile, user_group INTO keygens, uuids, mobiles, userGroup FROM base_user WHERE id = user_id;			PERFORM structure_redis(json_build_object(				                        'pk', user_id,				                        'type', 'info',				                        'storage', 'sessionStorage',				                        'store', 'userInfo',				                        'table', 'police_view_user',				                        'where', 'uid = ' || user_id					                        ));			PERFORM structure_redis(json_build_object(				                        'pk', 'masseserList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'user_group::JSONB @> json_build_array(''masses'')::JSONB'					                        ));			PERFORM structure_redis(json_build_object(				                        'pk', 'allUserList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'uid > 0'					                        ));			return_val := json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功设置手机!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							),							json_build_object(									'table', 'userList',									'pk', 'masseserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:masseserList',									'notice', json_build_array('policer'),									'description', '普通用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'allUserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:allUserList',									'notice', json_build_array('policer'),									'description', '所有用户列表数据'							)					)			);			IF(userGroup::JSONB @> json_build_array('department')::JSONB) THEN				PERFORM structure_redis(json_build_object(					                        'pk', 'departmenterList',					                        'storage', 'indexedDBStorage',					                        'store', 'userList',					                        'table', 'police_view_user_list',					                        'where', 'user_group::JSONB @> json_build_array(''department'')::JSONB'						                        ));				return_val := json_build_object(						'code', 201,						'type', 'Success',						'message', '用户成功设置手机!',						'user', json_build_object(								'uid', user_id,								'uuid', uuids,								'keygen', keygens,								'mobile', mobiles						),						'redis', json_build_array(								json_build_object(										'pk', user_id,										'key', 'sessionStorage_userInfo:' || user_id,										'type', 'info',										'storage', 'sessionStorage',										'store', 'userInfo',										'table', 'userInfo',										'description', '用户详情数据'								),								json_build_object(										'table', 'userList',										'pk', 'masseserList',										'store', 'userList',										'type', 'list',										'key', 'indexedDBStorage_userList:masseserList',										'notice', json_build_array('policer'),										'description', '普通用户列表数据'								),								json_build_object(										'table', 'userList',										'pk', 'departmenterList',										'store', 'userList',										'type', 'list',										'key', 'indexedDBStorage_userList:departmenterList',										'notice', json_build_array('policer'),										'description', '职能部门用户列表数据'								),								json_build_object(										'table', 'userList',										'pk', 'allUserList',										'store', 'userList',										'type', 'list',										'key', 'indexedDBStorage_userList:allUserList',										'notice', json_build_array('policer'),										'description', '所有用户列表数据'								)						)				);			END IF;			IF(userGroup::JSONB @> json_build_array('police')::JSONB) THEN				PERFORM structure_redis(json_build_object(					                        'pk', 'policerList',					                        'storage', 'indexedDBStorage',					                        'store', 'userList',					                        'table', 'police_view_user_list',					                        'where', 'user_group::JSONB @> json_build_array(''police'')::JSONB'						                        ));				return_val := json_build_object(						'code', 201,						'type', 'Success',						'message', '用户成功设置手机!',						'user', json_build_object(								'uid', user_id,								'uuid', uuids,								'keygen', keygens,								'mobile', mobiles						),						'redis', json_build_array(								json_build_object(										'pk', user_id,										'key', 'sessionStorage_userInfo:' || user_id,										'type', 'info',										'storage', 'sessionStorage',										'store', 'userInfo',										'table', 'userInfo',										'description', '用户详情数据'								),								json_build_object(										'table', 'userList',										'pk', 'masseserList',										'store', 'userList',										'type', 'list',										'key', 'indexedDBStorage_userList:masseserList',										'notice', json_build_array('policer'),										'description', '普通用户列表数据'								),								json_build_object(										'table', 'userList',										'pk', 'policerList',										'store', 'userList',										'type', 'list',										'key', 'indexedDBStorage_userList:policerList',										'notice', json_build_array('policer'),										'description', '警官用户列表数据'								),								json_build_object(										'table', 'userList',										'pk', 'allUserList',										'store', 'userList',										'type', 'list',										'key', 'indexedDBStorage_userList:allUserList',										'notice', json_build_array('policer'),										'description', '所有用户列表数据'								)						)				);			END IF;			RETURN return_val;		ELSE			RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);		END IF;	ELSE		RETURN verify_code->0;	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户重置手机号码失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;/** # 用户获得积分逻辑存储过程 SELECT logic_user_gain_credit('用户UID', '获得的积分数量', '获得积分的原因', '操作者IP'); */CREATE OR REPLACE FUNCTION logic_user_gain_credit(	IN user_id INTEGER,					-- 用户UID	IN user_credit INTEGER,			-- 用户获得积分数量	IN gain_info VARCHAR(200),	-- 用户获得积分的原因	IN user_recip VARCHAR(15)		-- 用户操作IP) RETURNS JSONAS $$DECLARE	user_num INTEGER;	mobiles VARCHAR(11);	uuids VARCHAR(64);	keygens VARCHAR(200);	userGroup JSON;	return_val JSON;BEGIN	SELECT COUNT(*) INTO user_num FROM base_user WHERE id = user_id;	IF(user_num > 0) THEN		UPDATE base_user SET last_changes = 'gainCredit', credit = credit + user_credit, last_remark = gain_info, last_recip = user_recip::CIDR WHERE id = user_id;		SELECT keygen, uuid, mobile, user_group INTO keygens, uuids, mobiles, userGroup FROM base_user WHERE id = user_id;		PERFORM structure_redis(json_build_object(			                        'pk', user_id,			                        'storage', 'sessionStorage',			                        'store', 'userInfo',			                        'table', 'police_view_user',			                        'where', 'uid = ' || user_id				                        ));		PERFORM structure_redis(json_build_object(			                        'pk', 'masseserList',			                        'storage', 'indexedDBStorage',			                        'store', 'userList',			                        'table', 'police_view_user_list',			                        'where', 'user_group::JSONB @> json_build_array(''masses'')::JSONB'				                        ));		PERFORM structure_redis(json_build_object(			                        'pk', 'allUserList',			                        'storage', 'indexedDBStorage',			                        'store', 'userList',			                        'table', 'police_view_user_list',			                        'where', 'uid > 0'				                        ));		return_val := json_build_object(				'code', 201,				'type', 'Success',				'message', '用户成功获得积分!',				'user', json_build_object(						'uid', user_id,						'uuid', uuids,						'keygen', keygens,						'mobile', mobiles				),				'redis', json_build_array(						json_build_object(								'pk', user_id,								'key', 'sessionStorage_userInfo:' || user_id,								'type', 'info',								'storage', 'sessionStorage',								'store', 'userInfo',								'table', 'userInfo',								'description', '用户详情数据'						),						json_build_object(								'table', 'userList',								'pk', 'masseserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:masseserList',								'notice', json_build_array('policer'),								'description', '普通用户列表数据'						),						json_build_object(								'table', 'userList',								'pk', 'allUserList',								'store', 'userList',								'type', 'list',								'key', 'indexedDBStorage_userList:allUserList',								'notice', json_build_array('policer'),								'description', '所有用户列表数据'						)				)		);		IF(userGroup::JSONB @> json_build_array('department')::JSONB) THEN			PERFORM structure_redis(json_build_object(				                        'pk', 'departmenterList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'user_group::JSONB @> json_build_array(''department'')::JSONB'					                        ));			return_val := json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功获得积分!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							),							json_build_object(									'table', 'userList',									'pk', 'masseserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:masseserList',									'notice', json_build_array('policer'),									'description', '普通用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'departmenterList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:departmenterList',									'notice', json_build_array('policer'),									'description', '职能部门用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'allUserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:allUserList',									'notice', json_build_array('policer'),									'description', '所有用户列表数据'							)					)			);		END IF;		IF(userGroup::JSONB @> json_build_array('police')::JSONB) THEN			PERFORM structure_redis(json_build_object(				                        'pk', 'policerList',				                        'storage', 'indexedDBStorage',				                        'store', 'userList',				                        'table', 'police_view_user_list',				                        'where', 'user_group::JSONB @> json_build_array(''police'')::JSONB'					                        ));			return_val := json_build_object(					'code', 201,					'type', 'Success',					'message', '用户成功获得积分!',					'user', json_build_object(							'uid', user_id,							'uuid', uuids,							'keygen', keygens,							'mobile', mobiles					),					'redis', json_build_array(							json_build_object(									'pk', user_id,									'key', 'sessionStorage_userInfo:' || user_id,									'type', 'info',									'storage', 'sessionStorage',									'store', 'userInfo',									'table', 'userInfo',									'description', '用户详情数据'							),							json_build_object(									'table', 'userList',									'pk', 'masseserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:masseserList',									'notice', json_build_array('policer'),									'description', '普通用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'policerList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:policerList',									'notice', json_build_array('policer'),									'description', '警官用户列表数据'							),							json_build_object(									'table', 'userList',									'pk', 'allUserList',									'store', 'userList',									'type', 'list',									'key', 'indexedDBStorage_userList:allUserList',									'notice', json_build_array('policer'),									'description', '所有用户列表数据'							)					)			);		END IF;		RETURN return_val;	ELSE		RETURN json_build_object('type', 'Error', 'message', '指定用户UID不存在!', 'code', 230);	END IF;	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '用户获得积分失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;