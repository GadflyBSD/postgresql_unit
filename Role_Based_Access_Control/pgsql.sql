create extension if not exists "uuid-ossp";create extension if not exists pgcrypto ;DROP VIEW IF EXISTS base_user_list_view;DROP VIEW IF EXISTS base_user_view;DROP TABLE IF EXISTS base_log_user;DROP TABLE IF EXISTS base_picture;DROP TABLE IF EXISTS base_user_group;DROP TABLE IF EXISTS base_user;DROP TYPE IF EXISTS gender;CREATE TYPE gender AS ENUM('male', 'female', 'unknown');DROP TYPE IF EXISTS user_changes;CREATE TYPE user_changes AS ENUM('Register', 'Login', 'Logout', 'setHeadimg', 'changeNickname', 'setPassword', 'forgotPassword', 'changeMobile', 'gainCredit', 'joinUserGroup', 'removeUserGroup', 'applyRealname', 'auditRealname', 'bindWeixin', 'bindQQ', 'bindWeibo');DROP TABLE IF EXISTS base_log_user;CREATE TABLE base_log_user (	id SERIAL8,	uid INTEGER DEFAULT 0,	related VARCHAR(30) DEFAULT 'user',	related_pk INTEGER NOT NULL,	changes VARCHAR(20) DEFAULT NULL,	credits INTEGER DEFAULT 0,	info TEXT NOT NULL,	recip CIDR NOT NULL,	remark TEXT DEFAULT NULL,	datetime TIMESTAMP(3) WITHOUT TIME ZONE NOT NULL DEFAULT now(),	PRIMARY KEY (id));COMMENT ON TABLE base_log_user IS '用户系统日志记录表';COMMENT ON COLUMN base_log_user.id IS '自增主键';COMMENT ON COLUMN base_log_user.uid IS '用户uid';COMMENT ON COLUMN base_log_user.related IS '关联数据表,如果没有则为NULL';COMMENT ON COLUMN base_log_user.related_pk IS '关联表id或主键';COMMENT ON COLUMN base_log_user.changes IS '变更类型';COMMENT ON COLUMN base_log_user.credits IS '可用会员积分';COMMENT ON COLUMN base_log_user.info IS '日志说明';COMMENT ON COLUMN base_log_user.recip IS '操作者ip';COMMENT ON COLUMN base_log_user.remark IS '其他备注说明';COMMENT ON COLUMN base_log_user.datetime IS '数据变动时间';DROP TABLE IF EXISTS base_picture;CREATE TABLE base_picture(	id SERIAL8,	uid INTEGER NOT NULL,	path VARCHAR(200) NOT NULL,	ext VARCHAR(10) DEFAULT NULL,	filename VARCHAR(50) DEFAULT NULL,	type VARCHAR(50) DEFAULT NULL,	md5 VARCHAR(32) NOT NULL,	sha1 VARCHAR(40) NOT NULL,	datetime TIMESTAMP(3) WITHOUT TIME ZONE NOT NULL DEFAULT now(),	recip CIDR NOT NULL,	status INTEGER DEFAULT 1,	PRIMARY KEY (id));COMMENT ON TABLE base_picture IS '图片数据表';COMMENT ON COLUMN base_picture.id IS '自增主键';COMMENT ON COLUMN base_picture.uid IS '上传用户UID';COMMENT ON COLUMN base_picture.path IS '图片路径';COMMENT ON COLUMN base_picture.ext IS '图片文件后缀';COMMENT ON COLUMN base_picture.filename IS '图片文件名';COMMENT ON COLUMN base_picture.type IS '图片使用类型';COMMENT ON COLUMN base_picture.md5 IS '图片MD5';COMMENT ON COLUMN base_picture.sha1 IS '图片SHA1';COMMENT ON COLUMN base_picture.datetime IS '图片上传时间';COMMENT ON COLUMN base_picture.recip IS '图片上传IP';COMMENT ON COLUMN base_picture.status IS '图片状态';DROP TABLE IF EXISTS base_user_group;CREATE TABLE base_user_group(	id SERIAL,	upid INTEGER DEFAULT 0,	group_name VARCHAR(100) NOT NULL,	description TEXT DEFAULT NULL,	sort INTEGER DEFAULT 0,	status SMALLINT DEFAULT 1,	PRIMARY KEY (id));COMMENT ON TABLE base_user_group IS '用户组数据表';COMMENT ON COLUMN base_user_group.id IS '自增主键';COMMENT ON COLUMN base_user_group.upid IS '上级用户组ID';COMMENT ON COLUMN base_user_group.group_name IS '用户组名称';COMMENT ON COLUMN base_user_group.description IS '用户组说明';COMMENT ON COLUMN base_user_group.sort IS '用户组排序';COMMENT ON COLUMN base_user_group.status IS '用户组状态';DROP TABLE IF EXISTS base_user;CREATE TABLE base_user (	id SERIAL8,	uuid uuid DEFAULT uuid_generate_v4(),	keygen VARCHAR(200) DEFAULT NULL,	headimg INTEGER DEFAULT 0,	mobile VARCHAR(11) NOT NULL,	password VARCHAR(100) DEFAULT NULL,	clear_password VARCHAR(64) NOT NULL,	nickname VARCHAR(50) DEFAULT NULL,	realname VARCHAR(20) DEFAULT NULL,	gid INTEGER[] DEFAULT ARRAY[]::INTEGER[],	level INTEGER DEFAULT 0,	credit INTEGER DEFAULT 0,	register_recip CIDR DEFAULT NULL,	login_recip CIDR DEFAULT NULL,	register_datetime TIMESTAMP(3) WITHOUT TIME ZONE NOT NULL DEFAULT now(),	login_datetime TIMESTAMP(3) WITHOUT TIME ZONE DEFAULT NULL,	logout_datetime TIMESTAMP(3) WITHOUT TIME ZONE DEFAULT NULL,	last_changes user_changes DEFAULT 'Register',	last_recip CIDR NOT NULL,	last_related VARCHAR(45) DEFAULT 'user',	last_pk INTEGER DEFAULT 0,	last_info TEXT DEFAULT NULL,	last_remark TEXT DEFAULT NULL,	PRIMARY KEY (id),	UNIQUE(mobile));COMMENT ON TABLE base_user IS '用户数据表';COMMENT ON COLUMN base_user.id IS '自增主键';COMMENT ON COLUMN base_user.uuid IS 'uuid';COMMENT ON COLUMN base_user.keygen IS 'keygen';COMMENT ON COLUMN base_user.headimg IS '头像ID';COMMENT ON COLUMN base_user.mobile IS '手机号码';COMMENT ON COLUMN base_user.password IS '用户密码';COMMENT ON COLUMN base_user.clear_password IS '明文密码';COMMENT ON COLUMN base_user.nickname IS '用户昵称';COMMENT ON COLUMN base_user.realname IS '用户真实姓名';COMMENT ON COLUMN base_user.gid IS '用户分组';COMMENT ON COLUMN base_user.level IS '用户等级';COMMENT ON COLUMN base_user.credit IS '用户积分';COMMENT ON COLUMN base_user.register_recip IS '用户注册时IP';COMMENT ON COLUMN base_user.login_recip IS '用户登录时IP';COMMENT ON COLUMN base_user.register_datetime IS '注册时间';COMMENT ON COLUMN base_user.login_datetime IS '登录时间';COMMENT ON COLUMN base_user.logout_datetime IS '退出时间';COMMENT ON COLUMN base_user.last_changes IS '最后一次变更类型';COMMENT ON COLUMN base_user.last_recip IS '最后一次操作者ip';COMMENT ON COLUMN base_user.last_related IS '最后一次变更关联数据表名';COMMENT ON COLUMN base_user.last_pk IS '最后一次变更数据表主键';COMMENT ON COLUMN base_user.last_info IS '最后一次变更说明';COMMENT ON COLUMN base_user.last_remark IS '其他备注, 用于审核说明';CREATE OR REPLACE FUNCTION trigger_after_insert_base_user()	RETURNS TRIGGERAS $$DECLARE	infos TEXT;BEGIN	infos := '新用户【' || NEW.mobile || '】成功注册成为用户!';	UPDATE base_user SET "password" = crypt(NEW.clear_password, gen_salt('md5')),	                     register_recip = NEW.last_recip,	                     last_pk = NEW.id,	                     last_info = infos	WHERE id = NEW.id;	INSERT INTO base_log_user (uid, related, related_pk, changes, "info", recip)	VALUES (NEW.id, NEW.last_related, NEW.id, 'Register', infos, NEW.last_recip);	RETURN NEW;END;$$ LANGUAGE plpgsql;DROP TRIGGER IF EXISTS base_user_after_insert ON base_user;CREATE TRIGGER base_user_after_insert AFTER INSERT ON base_user	FOR EACH ROWEXECUTE PROCEDURE trigger_after_insert_base_user();CREATE OR REPLACE FUNCTION trigger_after_update_base_user()	RETURNS TRIGGERAS $$DECLARE	user_group VARCHAR(200);BEGIN	CASE NEW.last_changes		WHEN 'setHeadimg' THEN			NEW.last_related := 'picture';			NEW.last_pk := NEW.last_remark;			NEW.headimg := NEW.last_remark;			NEW.last_info := 'APP 用户自定义头像操作！';		WHEN 'changeNickname' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.nickname := NEW.last_remark;			NEW.last_info := 'APP 用户设定昵称操作！';		WHEN 'setRealname' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.realname := NEW.last_remark;			NEW.last_info := 'APP 用户设定真实姓名操作！';		WHEN 'setPassword' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.clear_password := NEW.last_remark;			NEW.password := crypt(NEW.last_remark, gen_salt('md5'));			NEW.last_info := 'APP 用户变更登录密码操作！';		WHEN 'forgotPassword' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.clear_password := NEW.last_remark;			NEW.password := crypt(NEW.last_remark, gen_salt('md5'));			NEW.last_info := 'APP 用户通过手机重置密码操作！';		WHEN 'changeMobile' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.mobile := NEW.last_remark;			NEW.last_info := 'APP 用户变更手机号码操作！';		WHEN 'Login' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.login_recip := NEW.last_recip;			NEW.login_datetime := now();			NEW.logout_datetime := NULL;			NEW.keygen := encode(digest(concat(CAST(NEW.login_datetime AS TEXT), random()::text), 'md5'),'hex');			NEW.last_info := 'APP 用户登录操作！';		WHEN 'Logout' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.login_datetime := NULL;			NEW.logout_datetime := now();			NEW.keygen := '';			NEW.last_info := 'APP 用户退出操作！';		WHEN 'gainCredit' THEN			NEW.last_info := 'APP 用户获得积分！原因：' || NEW.last_remark;		WHEN 'joinUserGroup' THEN			NEW.gid = array_append(NEW.gid, NEW.last_pk);			SELECT string_agg(group_name, ', ') INTO user_group FROM base_user_group WHERE id = NEW.last_pk;			NEW.last_info := '设置用户【' || NEW.realname || '】为【' || user_group || '】用户组的成员！';			NEW.last_related := 'user';			NEW.last_pk := NEW.id;		WHEN 'removeUserGroup' THEN			NEW.gid = array_remove(NEW.gid, NEW.last_pk);			SELECT string_agg(group_name, ', ') INTO user_group FROM base_user_group WHERE id = NEW.last_pk;			NEW.last_info := '取消用户【' || NEW.realname || '】为【' || user_group || '】用户组的成员！';			NEW.last_related := 'user';			NEW.last_pk := NEW.id;	ELSE		NEW.last_changes := 'manageSet';		NEW.last_related := 'user';		NEW.last_pk := NEW.id;		NEW.last_info := '管理后台对用户进行修改操作！';	END CASE ;	INSERT INTO base_log_user (uid, related, related_pk, changes, "info", recip)	VALUES (NEW.id, NEW.last_related, NEW.last_pk, NEW.last_changes, NEW.last_info, NEW.last_recip);	RETURN NEW;END;$$ LANGUAGE plpgsql;DROP TRIGGER IF EXISTS base_user_after_update ON base_user;CREATE TRIGGER base_user_after_update BEFORE UPDATE OF last_changes ON base_user	FOR EACH ROWEXECUTE PROCEDURE trigger_after_update_base_user();DROP VIEW IF EXISTS base_user_view;CREATE VIEW base_user_view AS	SELECT				 u.id AS uid,				 u.uuid,				 u.keygen,				 u.headimg,				 (CASE WHEN (u.headimg = 0) THEN 'img/no-headimg.jpg' ELSE p.path END) AS headimg_url,				 u.mobile,				 u.nickname,				 u.realname,				 u.gid,				 (array_agg(g.group_name)) AS group,				 u.level,				 u.credit,				 u.register_datetime,				 u.login_datetime,				 u.logout_datetime	FROM base_user u LEFT JOIN base_picture p ON p.id = u.headimg	                 LEFT JOIN base_user_group g ON g.id = ANY(u.gid)	GROUP BY u.id, p.path;DROP VIEW IF EXISTS base_user_list_view;CREATE VIEW base_user_list_view AS	SELECT				 u.id AS uid,				 u.keygen,				 (CASE WHEN (u.headimg = 0) THEN 'img/no-headimg.jpg' ELSE p.path END) AS headimg_url,				 u.mobile,				 u.nickname,				 u.realname,				 (array_agg(g.group_name)) AS group,				 u.level,				 u.credit,				 (CASE WHEN u.login_datetime IS NULL THEN FALSE ELSE TRUE END) AS online	FROM base_user u LEFT JOIN base_picture p ON p.id = u.headimg	                 LEFT JOIN base_user_group g ON g.id = ANY(u.gid)	GROUP BY u.id, p.path;