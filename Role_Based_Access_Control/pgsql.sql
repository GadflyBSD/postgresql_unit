create extension if not exists "uuid-ossp";create extension if not exists pgcrypto ;DROP VIEW IF EXISTS base_user_list_view;DROP VIEW IF EXISTS base_user_view;DROP TABLE IF EXISTS base_log_user;DROP TABLE IF EXISTS base_picture;DROP TABLE IF EXISTS base_user_group;DROP TABLE IF EXISTS base_user;DROP TABLE IF EXISTS base_user_realname;DROP TYPE IF EXISTS gender;CREATE TYPE gender AS ENUM('male', 'female', 'unknown');DROP TYPE IF EXISTS user_changes;CREATE TYPE user_changes AS ENUM('Register', 'Login', 'Logout', 'setHeadimg', 'changeNickname', 'changePassword', 'forgotPassword', 'changeMobile', 'gainCredit', 'joinUserGroup', 'removeUserGroup', 'applyRealname', 'successRealname', 'failRealname', 'bindWeixin', 'bindQQ', 'bindWeibo');DROP TYPE IF EXISTS realname_state;CREATE TYPE realname_state AS ENUM('apply', 'success', 'fail', 'wait');DROP TABLE IF EXISTS base_log_user;CREATE TABLE base_log_user (	id SERIAL8,	uid INTEGER DEFAULT 0,	related VARCHAR(30) DEFAULT 'user',	related_pk INTEGER NOT NULL,	changes VARCHAR(20) DEFAULT NULL,	credits INTEGER DEFAULT 0,	info TEXT NOT NULL,	recip CIDR NOT NULL,	remark TEXT DEFAULT NULL,	datetime TIMESTAMP(3) WITHOUT TIME ZONE NOT NULL DEFAULT now(),	PRIMARY KEY (id));COMMENT ON TABLE base_log_user IS '用户系统日志记录表';COMMENT ON COLUMN base_log_user.id IS '自增主键';COMMENT ON COLUMN base_log_user.uid IS '用户uid';COMMENT ON COLUMN base_log_user.related IS '关联数据表,如果没有则为NULL';COMMENT ON COLUMN base_log_user.related_pk IS '关联表id或主键';COMMENT ON COLUMN base_log_user.changes IS '变更类型';COMMENT ON COLUMN base_log_user.credits IS '可用会员积分';COMMENT ON COLUMN base_log_user.info IS '日志说明';COMMENT ON COLUMN base_log_user.recip IS '操作者ip';COMMENT ON COLUMN base_log_user.remark IS '其他备注说明';COMMENT ON COLUMN base_log_user.datetime IS '数据变动时间';DROP TABLE IF EXISTS base_picture;CREATE TABLE base_picture(	id SERIAL8,	uid INTEGER NOT NULL,	path VARCHAR(200) NOT NULL,	ext VARCHAR(10) DEFAULT NULL,	filename VARCHAR(50) DEFAULT NULL,	type VARCHAR(50) DEFAULT NULL,	md5 VARCHAR(32) NOT NULL,	sha1 VARCHAR(40) NOT NULL,	datetime TIMESTAMP(3) WITHOUT TIME ZONE NOT NULL DEFAULT now(),	recip CIDR NOT NULL,	status INTEGER DEFAULT 1,	PRIMARY KEY (id));COMMENT ON TABLE base_picture IS '图片数据表';COMMENT ON COLUMN base_picture.id IS '自增主键';COMMENT ON COLUMN base_picture.uid IS '上传用户UID';COMMENT ON COLUMN base_picture.path IS '图片路径';COMMENT ON COLUMN base_picture.ext IS '图片文件后缀';COMMENT ON COLUMN base_picture.filename IS '图片文件名';COMMENT ON COLUMN base_picture.type IS '图片使用类型';COMMENT ON COLUMN base_picture.md5 IS '图片MD5';COMMENT ON COLUMN base_picture.sha1 IS '图片SHA1';COMMENT ON COLUMN base_picture.datetime IS '图片上传时间';COMMENT ON COLUMN base_picture.recip IS '图片上传IP';COMMENT ON COLUMN base_picture.status IS '图片状态';DROP TABLE IF EXISTS base_user;CREATE TABLE base_user (	id SERIAL8,	uuid uuid DEFAULT uuid_generate_v4(),	keygen VARCHAR(200) DEFAULT NULL,	headimg INTEGER DEFAULT 0,	mobile VARCHAR(11) NOT NULL,	password VARCHAR(100) DEFAULT NULL,	clear_password VARCHAR(64) NOT NULL,	nickname VARCHAR(50) DEFAULT NULL,	realname INTEGER DEFAULT NULL,	weixin INTEGER DEFAULT NULL,	qq INTEGER DEFAULT NULL,	weibo INTEGER NULL,	alipay INTEGER NULL,	gid INTEGER[] DEFAULT ARRAY[]::INTEGER[],	level INTEGER DEFAULT 0,	credit INTEGER DEFAULT 0,	register_recip CIDR DEFAULT NULL,	login_recip CIDR DEFAULT NULL,	register_datetime TIMESTAMP(3) WITHOUT TIME ZONE DEFAULT now(),	login_datetime TIMESTAMP(3) WITHOUT TIME ZONE DEFAULT NULL,	logout_datetime TIMESTAMP(3) WITHOUT TIME ZONE DEFAULT NULL,	last_changes user_changes DEFAULT 'Register',	last_recip CIDR NOT NULL,	last_related VARCHAR(45) DEFAULT 'user',	last_pk INTEGER DEFAULT 0,	last_info TEXT DEFAULT NULL,	last_remark TEXT DEFAULT NULL,	PRIMARY KEY (id),	UNIQUE(mobile));COMMENT ON TABLE base_user IS '用户数据表';COMMENT ON COLUMN base_user.id IS '自增主键';COMMENT ON COLUMN base_user.uuid IS 'uuid';COMMENT ON COLUMN base_user.keygen IS 'keygen';COMMENT ON COLUMN base_user.headimg IS '头像ID';COMMENT ON COLUMN base_user.mobile IS '手机号码';COMMENT ON COLUMN base_user.password IS '用户密码';COMMENT ON COLUMN base_user.clear_password IS '明文密码';COMMENT ON COLUMN base_user.nickname IS '用户昵称';COMMENT ON COLUMN base_user.realname IS '真实姓名ID';COMMENT ON COLUMN base_user.weixin IS '绑定微信ID';COMMENT ON COLUMN base_user.qq IS '绑定QQ ID';COMMENT ON COLUMN base_user.weibo IS '绑定微博ID';COMMENT ON COLUMN base_user.alipay IS '绑定支付宝ID';COMMENT ON COLUMN base_user.gid IS '用户分组';COMMENT ON COLUMN base_user.level IS '用户等级';COMMENT ON COLUMN base_user.credit IS '用户积分';COMMENT ON COLUMN base_user.register_recip IS '用户注册时IP';COMMENT ON COLUMN base_user.login_recip IS '用户登录时IP';COMMENT ON COLUMN base_user.register_datetime IS '注册时间';COMMENT ON COLUMN base_user.login_datetime IS '登录时间';COMMENT ON COLUMN base_user.logout_datetime IS '退出时间';COMMENT ON COLUMN base_user.last_changes IS '最后一次变更类型';COMMENT ON COLUMN base_user.last_recip IS '最后一次操作者ip';COMMENT ON COLUMN base_user.last_related IS '最后一次变更关联数据表名';COMMENT ON COLUMN base_user.last_pk IS '最后一次变更数据表主键';COMMENT ON COLUMN base_user.last_info IS '最后一次变更说明';COMMENT ON COLUMN base_user.last_remark IS '其他备注, 用于审核说明';CREATE OR REPLACE FUNCTION trigger_after_insert_base_user()	RETURNS TRIGGERAS $$DECLARE	infos TEXT;BEGIN	infos := '新用户【' || NEW.mobile || '】成功注册成为用户!';	UPDATE base_user SET "password" = crypt(NEW.clear_password, gen_salt('md5')),	                     register_recip = NEW.last_recip,	                     last_pk = NEW.id,	                     last_info = infos	WHERE id = NEW.id;	INSERT INTO base_log_user (uid, related, related_pk, changes, "info", recip)	VALUES (NEW.id, NEW.last_related, NEW.id, 'Register', infos, NEW.last_recip);	RETURN NEW;END;$$ LANGUAGE plpgsql;DROP TRIGGER IF EXISTS base_user_after_insert ON base_user;CREATE TRIGGER base_user_after_insert AFTER INSERT ON base_user	FOR EACH ROWEXECUTE PROCEDURE trigger_after_insert_base_user();CREATE OR REPLACE FUNCTION trigger_after_update_base_user()	RETURNS TRIGGERAS $$DECLARE	user_group VARCHAR(200);BEGIN	CASE NEW.last_changes		WHEN 'setHeadimg' THEN			NEW.last_related := 'picture';			NEW.last_pk := NEW.last_remark;			NEW.headimg := NEW.last_remark;			NEW.last_info := 'APP 用户自定义头像操作！';		WHEN 'changeNickname' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.nickname := NEW.last_remark;			NEW.last_info := 'APP 用户设定昵称操作！';		WHEN 'changePassword' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.clear_password := NEW.last_remark;			NEW.password := crypt(NEW.last_remark, gen_salt('md5'));			NEW.last_info := 'APP 用户变更登录密码操作！';		WHEN 'forgotPassword' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.clear_password := NEW.last_remark;			NEW.password := crypt(NEW.last_remark, gen_salt('md5'));			NEW.last_info := 'APP 用户通过手机找回密码操作！';		WHEN 'changeMobile' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.mobile := NEW.last_remark;			NEW.last_info := 'APP 用户变更手机号码操作！';		WHEN 'Login' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.login_recip := NEW.last_recip;			NEW.login_datetime := now();			NEW.logout_datetime := NULL;			NEW.keygen := encode(digest(concat(CAST(NEW.login_datetime AS TEXT), random()::text), 'md5'),'hex');			NEW.last_info := 'APP 用户登录操作！';		WHEN 'Logout' THEN			NEW.last_related := 'user';			NEW.last_pk := NEW.id;			NEW.login_datetime := NULL;			NEW.logout_datetime := now();			NEW.keygen := '';			NEW.last_info := 'APP 用户退出操作！';		WHEN 'gainCredit' THEN			NEW.credit := OLD.credit + NEW.last_pk;			NEW.last_info := 'APP 用户获得积分！原因：' || NEW.last_remark;		WHEN 'applyRealname' THEN			NEW.last_related := 'realname';			NEW.realname := NEW.last_pk;			NEW.last_info := NEW.last_remark;		WHEN 'successRealname' THEN			NEW.last_related := 'realname';			NEW.realname := NEW.last_pk;			NEW.last_info := NEW.last_remark;		WHEN 'failRealname' THEN			NEW.last_related := 'realname';			NEW.realname := NEW.last_pk;			NEW.last_info := NEW.last_remark;		WHEN 'bindWeixin' THEN			NEW.last_related := 'weixin';			NEW.weixin = NEW.last_pk;			NEW.last_info := NEW.last_remark;		WHEN 'joinUserGroup' THEN			NEW.gid = array_append(NEW.gid, NEW.last_pk);			SELECT string_agg(group_name, ', ') INTO user_group FROM base_user_group WHERE id = NEW.last_pk;			NEW.last_info := '设置用户【' || NEW.realname || '】为【' || user_group || '】用户组的成员！';			NEW.last_related := 'user';			NEW.last_pk := NEW.id;		WHEN 'removeUserGroup' THEN			NEW.gid = array_remove(NEW.gid, NEW.last_pk);			SELECT string_agg(group_name, ', ') INTO user_group FROM base_user_group WHERE id = NEW.last_pk;			NEW.last_info := '取消用户【' || NEW.realname || '】为【' || user_group || '】用户组的成员！';			NEW.last_related := 'user';			NEW.last_pk := NEW.id;	ELSE		NEW.last_changes := 'manageSet';		NEW.last_related := 'user';		NEW.last_pk := NEW.id;		NEW.last_info := '管理后台对用户进行修改操作！';	END CASE ;	INSERT INTO base_log_user (uid, related, related_pk, changes, "info", recip)	VALUES (NEW.id, NEW.last_related, NEW.last_pk, NEW.last_changes, NEW.last_info, NEW.last_recip);	RETURN NEW;END;$$ LANGUAGE plpgsql;DROP TRIGGER IF EXISTS base_user_after_update ON base_user;CREATE TRIGGER base_user_after_update BEFORE UPDATE OF last_changes ON base_user	FOR EACH ROWEXECUTE PROCEDURE trigger_after_update_base_user();DROP TABLE IF EXISTS base_user_realname;CREATE TABLE base_user_realname (	id SERIAL8,	uid INTEGER NOT NULL,	realname VARCHAR(20) NOT NULL,	idcard VARCHAR(18) NOT NULL,	birthday DATE DEFAULT NULL,	gender gender DEFAULT NULL,	nation VARCHAR(20) DEFAULT NULL,	address VARCHAR(200) DEFAULT NULL,	headimg INTEGER DEFAULT 0,	idcard_front INTEGER NOT NULL,	idcard_back INTEGER NOT NULL,	apply_recip CIDR NOT NULL,	apply_datetime TIMESTAMP(3) WITHOUT TIME ZONE DEFAULT NOW(),	audit_uid INTEGER,	audit_recip CIDR DEFAULT NULL,	audit_datetime TIMESTAMP(3) WITHOUT TIME ZONE DEFAULT NULL,	cause TEXT DEFAULT NULL,	state realname_state DEFAULT 'apply',PRIMARY KEY (id));COMMENT ON TABLE base_user_realname IS '用户实名认证数据表';COMMENT ON COLUMN base_user_realname.id IS '自增主键';COMMENT ON COLUMN base_user_realname.uid IS 'APP用户id';COMMENT ON COLUMN base_user_realname.realname IS '真实姓名';COMMENT ON COLUMN base_user_realname.idcard IS '身份证号码';COMMENT ON COLUMN base_user_realname.birthday IS '出生年月日';COMMENT ON COLUMN base_user_realname.gender IS '性别';COMMENT ON COLUMN base_user_realname.nation IS '民族';COMMENT ON COLUMN base_user_realname.address IS '地址';COMMENT ON COLUMN base_user_realname.headimg IS '身份证头像';COMMENT ON COLUMN base_user_realname.idcard_front IS '身份证正面图片';COMMENT ON COLUMN base_user_realname.idcard_back IS '身份证背面图片';COMMENT ON COLUMN base_user_realname.apply_recip IS '申请认证操作者ip';COMMENT ON COLUMN base_user_realname.apply_datetime IS '申请认证时间截';COMMENT ON COLUMN base_user_realname.audit_uid IS '系统审核操作者uid';COMMENT ON COLUMN base_user_realname.audit_recip IS '系统审核操作者ip';COMMENT ON COLUMN base_user_realname.audit_datetime IS '系统审核时间截';COMMENT ON COLUMN base_user_realname.cause IS '审核失败原因';COMMENT ON COLUMN base_user_realname.state IS '认证状态';CREATE OR REPLACE FUNCTION trigger_before_insert_base_user_realname()	RETURNS TRIGGERAS $$DECLARE	infos TEXT;BEGIN	NEW.birthday := (substr(NEW.idcard, 7, 4) || '-' || substr(NEW.idcard, 11, 2) || '-' || substr(NEW.idcard, 13, 2))::DATE;	IF (substr(NEW.idcard, 17, 1)::INTEGER % 2 = 1) THEN		NEW.gender := 'male';	ELSE		NEW.gender := 'female';	END IF;	infos := '用户【' || NEW.realname || '】申请实名认证，请等待系统审核!';	UPDATE base_user SET last_changes = 'applyRealname',	                     last_pk = NEW.id,	                     last_remark = infos,	                     last_recip = NEW.apply_recip	WHERE id = NEW.uid;	RETURN NEW;END;$$ LANGUAGE plpgsql;DROP TRIGGER IF EXISTS base_user_realname_before_insert ON base_user_realname;CREATE TRIGGER base_user_realname_before_insert BEFORE INSERT ON base_user_realname	FOR EACH ROWEXECUTE PROCEDURE trigger_before_insert_base_user_realname();CREATE OR REPLACE FUNCTION trigger_before_update_base_user_realname()	RETURNS TRIGGERAS $$DECLARE	infos TEXT;BEGIN	CASE NEW.state		WHEN 'success' THEN		infos := '用户【' || NEW.realname || '】所申请的实名认证，已经通过系统审核！';		WHEN 'fail' THEN		infos := '用户【' || NEW.realname || '】所申请的实名认证，未通过系统审核！原因：' || NEW.cause;	END CASE;	NEW.audit_datetime = NOW();	UPDATE base_user SET last_changes = (NEW.state ||'Realname')::user_changes,			                 last_pk = NEW.id,			                 last_remark = infos,			                 last_recip = NEW.audit_recip	WHERE id = NEW.uid;	RETURN NEW;END;$$ LANGUAGE plpgsql;DROP TRIGGER IF EXISTS base_user_realname_before_update ON base_user_realname;CREATE TRIGGER base_user_realname_before_update BEFORE UPDATE OF state ON base_user_realname	FOR EACH ROWEXECUTE PROCEDURE trigger_before_update_base_user_realname();DROP TABLE IF EXISTS base_bind_weixin;CREATE TABLE base_bind_weixin (	id SERIAL8,	uid INTEGER NOT NULL,	weixin VARCHAR(20) DEFAULT 'app',	openid VARCHAR(100) NOT NULL,	unionid VARCHAR(100) DEFAULT NULL,	nickname VARCHAR(200) NOT NULL,	sex SMALLINT DEFAULT NULL,	"language" VARCHAR(20) DEFAULT NULL,	city VARCHAR(20) DEFAULT NULL,	province VARCHAR(20) DEFAULT NULL,	country VARCHAR(20) DEFAULT NULL,	headimgurl TEXT NOT NULL,	privilege TEXT DEFAULT NULL,	datetime TIMESTAMP DEFAULT NOW(),	recip VARCHAR(15) NOT NULL,	PRIMARY KEY (id),	UNIQUE (openid));COMMENT ON TABLE base_bind_weixin IS '用户绑定微信信息数据表';COMMENT ON COLUMN base_bind_weixin.id IS '自增主键';COMMENT ON COLUMN base_bind_weixin.uid IS '用户UID';COMMENT ON COLUMN base_bind_weixin.weixin IS '关注微信号';COMMENT ON COLUMN base_bind_weixin.openid IS '用户微信移动应用OpenID';COMMENT ON COLUMN base_bind_weixin.unionid IS '用户微信unionid';COMMENT ON COLUMN base_bind_weixin.nickname IS '用户昵称';COMMENT ON COLUMN base_bind_weixin.sex IS '性别';COMMENT ON COLUMN base_bind_weixin.language IS '语言';COMMENT ON COLUMN base_bind_weixin.city IS '城市';COMMENT ON COLUMN base_bind_weixin.province IS '省份';COMMENT ON COLUMN base_bind_weixin.country IS '国家';COMMENT ON COLUMN base_bind_weixin.headimgurl IS '用户头像';COMMENT ON COLUMN base_bind_weixin.privilege IS '用户特权信息';COMMENT ON COLUMN base_bind_weixin.datetime IS '用户关注时间';COMMENT ON COLUMN base_bind_weixin.recip IS '操作者ip';CREATE OR REPLACE FUNCTION trigger_before_insert_base_bind_weixin()	RETURNS TRIGGERAS $$BEGIN	IF (NEW.uid IS NOT NULL) THEN		UPDATE base_user SET last_changes = 'bindWeixin',		                     last_pk = NEW.id,		                     last_remark = '微信用户【' || NEW.nickname || '】绑定现有用户操作成功!',		                     last_recip = NEW.recip		WHERE id = NEW.uid;	END IF;	RETURN NEW;END;$$ LANGUAGE plpgsql;DROP TRIGGER IF EXISTS base_bind_weixin_before_insert ON base_bind_weixin;CREATE TRIGGER base_bind_weixin_before_insert BEFORE INSERT ON base_bind_weixin	FOR EACH ROWEXECUTE PROCEDURE trigger_before_insert_base_bind_weixin();CREATE OR REPLACE FUNCTION trigger_before_update_base_bind_weixin()	RETURNS TRIGGERAS $$BEGIN	IF (NEW.uid IS NOT NULL) THEN		UPDATE base_user SET last_changes = 'bindWeixin',		                     last_pk = NEW.id,		                     last_remark = '微信用户【' || NEW.nickname || '】绑定现有用户操作成功!',		                     last_recip = NEW.recip		WHERE id = NEW.uid;	END IF;	RETURN NEW;END;$$ LANGUAGE plpgsql;DROP TRIGGER IF EXISTS base_bind_weixin_before_update ON base_bind_weixin;CREATE TRIGGER base_bind_weixin_before_update BEFORE UPDATE OF uid ON base_bind_weixin	FOR EACH ROWEXECUTE PROCEDURE trigger_before_update_base_bind_weixin();DROP VIEW IF EXISTS base_user_view;CREATE VIEW base_user_view AS	SELECT				 u.id AS uid,				 u.uuid,				 u.keygen,				 u.headimg,				 (CASE WHEN (u.headimg = 0) THEN 'img/no-headimg.jpg' ELSE p.path END) AS headimg_url,				 u.mobile,				 u.nickname,				 r.realname,				 r.birthday,				 r.gender,				 r.idcard,				 r.nation,				 r.address,				 r.idcard_front,				 (CASE WHEN (u.realname IS NULL) THEN 'img/no-idcard-front.jpg' ELSE cpf.path END) AS idcard_front_url,				 r.idcard_back,				 (CASE WHEN (u.realname IS NULL) THEN 'img/no-idcard-back.jpg' ELSE cpb.path END) AS idcard_back_url,				 (CASE WHEN (u.realname IS NULL) THEN 'wait' ELSE r.state END) AS realname_state,				 wx.openid, wx.headimgurl, wx.nickname AS weixin, wx.language, wx.country, wx.city, wx.privilege,				 wx.province, wx.sex,				 u.gid,				 (CASE WHEN (array_length(u.gid, 1) IS NULL) THEN ARRAY[]::VARCHAR[] ELSE array_agg(g.title) END) AS group,				 u.level,				 u.credit,				 u.register_datetime,				 u.login_datetime,				 u.logout_datetime	FROM base_user u LEFT JOIN base_picture p ON p.id = u.headimg	                 LEFT JOIN base_user_group g ON g.id = ANY(u.gid)	                 LEFT JOIN base_user_realname r ON r.id = u.realname	                 LEFT JOIN base_picture cpf ON cpf.id = r.idcard_front	                 LEFT JOIN base_picture cpb ON cpb.id = r.idcard_back	                 LEFT JOIN base_bind_weixin wx ON wx.id = u.weixin	GROUP BY u.id, p.path, r.realname, r.birthday, r.gender, r.idcard, r.nation, r.address, r.idcard_front, r.idcard_back, cpf.path, cpb.path, r.state, u.weixin,wx.openid, wx.headimgurl, wx.nickname, wx.language, wx.country, wx.city, wx.privilege, wx.province, wx.sex;DROP VIEW IF EXISTS base_user_list_view;CREATE VIEW base_user_list_view AS	SELECT				 u.id AS uid,				 u.keygen,				 (CASE WHEN (u.headimg = 0) THEN 'img/no-headimg.jpg' ELSE p.path END) AS headimg_url,				 u.mobile,				 u.nickname,				 r.realname,				 r.birthday,				 r.gender,				 (CASE WHEN (u.realname IS NULL) THEN 'wait' ELSE r.state END) AS realname_state,				 wx.openid, wx.headimgurl, wx.nickname AS weixin,				 (CASE WHEN (array_length(u.gid, 1) IS NULL) THEN ARRAY[]::VARCHAR[] ELSE array_agg(g.title) END) AS group,				 u.level,				 u.credit,				 (CASE WHEN u.login_datetime IS NULL THEN FALSE ELSE TRUE END) AS online	FROM base_user u LEFT JOIN base_picture p ON p.id = u.headimg	                 LEFT JOIN base_user_group g ON g.id = ANY(u.gid)	                 LEFT JOIN base_user_realname r ON r.id = u.realname	                 LEFT JOIN base_bind_weixin wx ON wx.id = u.weixin	GROUP BY u.id, p.path, r.realname, r.birthday, r.gender, r.state, u.weixin, wx.openid, wx.headimgurl, wx.nickname;DROP TABLE IF EXISTS base_user_group;CREATE TABLE base_user_group (	id SERIAL,	upid INTEGER DEFAULT 0,	identify VARCHAR(100) NOT NULL,	title VARCHAR(50) NOT NULL,	subtitle VARCHAR(200) DEFAULT NULL,	description TEXT DEFAULT NULL,	icon VARCHAR(100) DEFAULT NULL,	classes VARCHAR(100) DEFAULT NULL,	image INTEGER DEFAULT NULL,	sorts INTEGER DEFAULT 0,	PRIMARY KEY (id));COMMENT ON TABLE base_user_group IS '用户组数据表';COMMENT ON COLUMN base_user_group.id IS '自增主键';COMMENT ON COLUMN base_user_group.upid IS '上级ID';COMMENT ON COLUMN base_user_group.identify IS '用户组英文标识';COMMENT ON COLUMN base_user_group.title IS '用户组标题';COMMENT ON COLUMN base_user_group.subtitle IS '用户组子标题';COMMENT ON COLUMN base_user_group.description IS '用户组描述';COMMENT ON COLUMN base_user_group.icon IS '用户组图标';COMMENT ON COLUMN base_user_group.classes IS '用户组样式';COMMENT ON COLUMN base_user_group.image IS '用户组图片';COMMENT ON COLUMN base_user_group.sorts IS '用户组排序';INSERT INTO base_user_group (upid, identify, title, subtitle, description)VALUES (0, 'app_group', 'APP用户组', '站点系统前端APP用户组', '站点系统前端APP用户组'),       (0, 'manage_group', '后台管理员用户组', '后台管理员用户组', '后台管理员用户组'),       (1, 'Administrator', '超级管理员用户组', '后台超级管理员用户组', '后台超级管理员用户组'),       (0, 'develop', '开发人员用户组', '站点开发人员用户组', '站点开发人员用户组');DROP TABLE IF EXISTS base_menu;CREATE TABLE base_menu (	id SERIAL,	upid INTEGER DEFAULT 0,	identify VARCHAR(100) NOT NULL,	title VARCHAR(50) NOT NULL,	subtitle VARCHAR(200) DEFAULT NULL,	description TEXT DEFAULT NULL,	icon VARCHAR(100) DEFAULT NULL,	classes VARCHAR(100) DEFAULT NULL,	image INTEGER DEFAULT NULL,	sorts INTEGER DEFAULT 0,	PRIMARY KEY (id));COMMENT ON TABLE base_menu IS '系统菜单数据表';COMMENT ON COLUMN base_menu.id IS '自增主键';COMMENT ON COLUMN base_menu.upid IS '上级ID';COMMENT ON COLUMN base_menu.identify IS '菜单英文标识';COMMENT ON COLUMN base_menu.title IS '菜单标题';COMMENT ON COLUMN base_menu.subtitle IS '子标题';COMMENT ON COLUMN base_menu.description IS '描述';COMMENT ON COLUMN base_menu.icon IS '图标';COMMENT ON COLUMN base_menu.classes IS '样式';COMMENT ON COLUMN base_menu.image IS '图片';COMMENT ON COLUMN base_menu.sorts IS '排序';DROP TABLE IF EXISTS base_pages;CREATE TABLE base_pages (	id SERIAL,	mid INTEGER NOT NULL,	identify VARCHAR(100) NOT NULL,	title VARCHAR(100) NOT NULL,	subtitle VARCHAR(200) DEFAULT NULL,	description TEXT DEFAULT NULL,	icon VARCHAR(100) DEFAULT NULL,	classes VARCHAR(100) DEFAULT NULL,	image INTEGER DEFAULT NULL,	is_default BOOLEAN DEFAULT FALSE,	PRIMARY KEY (id));COMMENT ON TABLE base_pages IS '系统页面数据表';COMMENT ON COLUMN base_pages.id IS '自增主键';COMMENT ON COLUMN base_pages.mid IS '所属菜单ID';COMMENT ON COLUMN base_pages.identify IS '页面英文标识';COMMENT ON COLUMN base_pages.title IS '页面标题';COMMENT ON COLUMN base_pages.subtitle IS '子标题';COMMENT ON COLUMN base_pages.description IS '描述';COMMENT ON COLUMN base_pages.icon IS '图标';COMMENT ON COLUMN base_pages.classes IS '样式';COMMENT ON COLUMN base_pages.image IS '图片';COMMENT ON COLUMN base_pages.is_default IS '是否是默认页面';DROP TYPE IF EXISTS element_means;CREATE TYPE element_means AS ENUM ('structure', 'action');DROP TABLE IF EXISTS base_element;CREATE TABLE base_element (	id SERIAL,	mid INTEGER NOT NULL,	pid INTEGER NOT NULL,	identify VARCHAR(100) NOT NULL,	label VARCHAR(50) NOT NULL,	title VARCHAR(100) NOT NULL,	icon VARCHAR(100) DEFAULT NULL,	classes VARCHAR(100) DEFAULT NULL,	image INTEGER DEFAULT NULL,	means element_means NOT NULL,	PRIMARY KEY (id));COMMENT ON TABLE base_element IS '系统页面元素数据表';COMMENT ON COLUMN base_element.id IS '自增主键';COMMENT ON COLUMN base_element.mid IS '所属菜单ID';COMMENT ON COLUMN base_element.pid IS '所属页面ID';COMMENT ON COLUMN base_element.identify IS '页面元素英文标识';COMMENT ON COLUMN base_element.label IS '元素HTML标签';COMMENT ON COLUMN base_element.title IS '页面标题';COMMENT ON COLUMN base_element.icon IS '图标';COMMENT ON COLUMN base_element.classes IS '样式';COMMENT ON COLUMN base_element.image IS '图片';COMMENT ON COLUMN base_element.means IS '数据结构或模型';DROP TYPE IF EXISTS source_type;CREATE TYPE source_type AS ENUM('table', 'view', 'procedure', 'redis');DROP TABLE IF EXISTS base_structure;CREATE TABLE base_structure (	id SERIAL,	mid INTEGER NOT NULL,	pid INTEGER DEFAULT NULL,	eid INTEGER DEFAULT NULL,	structure VARCHAR(100) NOT NULL,	source_type source_type DEFAULT NULL,	source VARCHAR(200) DEFAULT NULL,	filters VARCHAR(200) DEFAULT NULL,	params JSON DEFAULT NULL,	PRIMARY KEY (id));COMMENT ON TABLE base_structure IS '系统数据结构信息表';COMMENT ON COLUMN base_structure.id IS '自增主键';COMMENT ON COLUMN base_structure.mid IS '系统菜单ID';COMMENT ON COLUMN base_structure.pid IS '系统页面ID';COMMENT ON COLUMN base_structure.eid IS '页面元素ID';COMMENT ON COLUMN base_structure.structure IS '数据结构名称';COMMENT ON COLUMN base_structure.source_type IS '数据源类型';COMMENT ON COLUMN base_structure.source IS '数据源名称';COMMENT ON COLUMN base_structure.filters IS '数据源筛选方法';COMMENT ON COLUMN base_structure.params IS '数据源参数';DROP TABLE IF EXISTS base_field;CREATE TABLE base_field (	id SERIAL,	sid INTEGER,	tables_name VARCHAR(100),	field_name VARCHAR(100),	field_default VARCHAR(200),	field_type VARCHAR(50),	field_comment VARCHAR(200),	field_primary BOOLEAN,	field_notnull BOOLEAN,	field_isenum BOOLEAN,	field_option JSON,	placeholder VARCHAR(200),	comment_as VARCHAR(200),	type_as VARCHAR(50),	option_as JSON,	is_show BOOLEAN,	field_order INTEGER,	form_group VARCHAR(50),	PRIMARY KEY (id));COMMENT ON TABLE base_field IS '系统字段信息表';COMMENT ON COLUMN base_field.id IS '自增主键';COMMENT ON COLUMN base_field.sid IS '数据结构ID';COMMENT ON COLUMN base_field.tables_name IS '表名称';COMMENT ON COLUMN base_field.field_name IS '字段名称';COMMENT ON COLUMN base_field.field_default IS '字段默认值';COMMENT ON COLUMN base_field.field_type IS '字段类型';COMMENT ON COLUMN base_field.field_comment IS '字段说明';COMMENT ON COLUMN base_field.field_primary IS '字段是否主键';COMMENT ON COLUMN base_field.field_notnull IS '字段是否非空';COMMENT ON COLUMN base_field.field_isenum IS '字段是否枚举类型';COMMENT ON COLUMN base_field.field_option IS '字段Option';COMMENT ON COLUMN base_field.placeholder IS '字段placeholder';COMMENT ON COLUMN base_field.comment_as IS '字段说明映射';COMMENT ON COLUMN base_field.type_as IS '字段类型映射';COMMENT ON COLUMN base_field.is_show IS '字段是否显示';COMMENT ON COLUMN base_field.field_order IS '字段排序';COMMENT ON COLUMN base_field.form_group IS '表单分组';DROP TYPE IF EXISTS action_means;CREATE TYPE action_means AS ENUM('button', 'prompt', 'confirm');DROP TABLE IF EXISTS base_action;CREATE TABLE base_action (	id SERIAL,	mid INTEGER NOT NULL,	pid INTEGER DEFAULT NULL,	eid INTEGER DEFAULT NULL,	action action_means DEFAULT 'button',	procedure VARCHAR(100) NOT NULL,	PRIMARY KEY (id));COMMENT ON TABLE base_action IS '系统菜单对应数据模型信息表';COMMENT ON COLUMN base_action.id IS '自增主键';COMMENT ON COLUMN base_action.mid IS '系统菜单ID';COMMENT ON COLUMN base_action.pid IS '系统页面ID';COMMENT ON COLUMN base_action.eid IS '页面元素ID';COMMENT ON COLUMN base_action.action IS '动作的方法';COMMENT ON COLUMN base_action.procedure IS '所对应的存储过程名称';DROP TABLE IF EXISTS base_permission;CREATE TABLE base_permission (	id SERIAL,	uid INTEGER DEFAULT NULL,	gid INTEGER DEFAULT NULL,	mid INTEGER NOT NULL,	pid INTEGER DEFAULT NULL,	eid INTEGER DEFAULT NULL,	allow BOOLEAN DEFAULT NULL,	PRIMARY KEY (id));COMMENT ON TABLE base_permission IS '系统权限数据表';COMMENT ON COLUMN base_permission.id IS '自增主键';COMMENT ON COLUMN base_permission.uid IS '用户UID';COMMENT ON COLUMN base_permission.gid IS '用户组ID';COMMENT ON COLUMN base_permission.mid IS '系统菜单ID';COMMENT ON COLUMN base_permission.pid IS '页面ID';COMMENT ON COLUMN base_permission.eid IS '元素ID';COMMENT ON COLUMN base_permission.allow IS '是否允许';