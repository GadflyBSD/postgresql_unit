DROP EXTENSION IF EXISTS www_fdw CASCADE;CREATE EXTENSION IF NOT EXISTS www_fdw;CREATE SERVER www_fdw_ailiyun_smscode_server FOREIGN DATA WRAPPER www_fdwOPTIONS (uri 'http://dysmsapi.aliyuncs.com');CREATE USER MAPPING FOR current_user SERVER www_fdw_ailiyun_smscode_server;CREATE FOREIGN TABLE www_fdw_ailiyun_smscode (	"RequestId" VARCHAR(100),	"Code" VARCHAR(50),	"Message" VARCHAR(200),	"BizId" VARCHAR(100)) SERVER www_fdw_ailiyun_smscode_server;DROP TABLE IF EXISTS base_config_category;CREATE TABLE base_config_category(	id SERIAL,	pid INTEGER NOT NULL,	category VARCHAR(100) NOT NULL,	description TEXT DEFAULT NULL,	sort INTEGER DEFAULT 0,	status SMALLINT DEFAULT 1,	PRIMARY KEY (id));COMMENT ON TABLE base_config_category IS '系统配置分类数据表';COMMENT ON COLUMN base_config_category.id IS '自增主键';COMMENT ON COLUMN base_config_category.pid IS '上级分类ID';COMMENT ON COLUMN base_config_category.category IS '分类名称';COMMENT ON COLUMN base_config_category.description IS '分类说明';COMMENT ON COLUMN base_config_category.sort IS '分类排序';COMMENT ON COLUMN base_config_category.status IS '分类状态';INSERT INTO base_config_category (pid, category) VALUES (0, '顶级分类');INSERT INTO base_config_category (pid, category) VALUES (1, '站点设置');INSERT INTO base_config_category (pid, category) VALUES (1, '第三方平台接口');INSERT INTO base_config_category (pid, category) VALUES (2, '阿里云短信');DROP TYPE IF EXISTS config_type;CREATE TYPE config_type AS ENUM ('varchar', 'json');DROP TABLE IF EXISTS base_config;CREATE TABLE base_config(	id SERIAL,	c_key VARCHAR(100) NOT NULL,	c_cid INTEGER NOT NULL ,	c_type config_type DEFAULT 'varchar',	c_value TEXT DEFAULT NULL,	c_json JSON DEFAULT NULL,	description TEXT DEFAULT NULL,	PRIMARY KEY (id));COMMENT ON TABLE base_config IS '系统配置数据表';COMMENT ON COLUMN base_config.id IS '自增主键';COMMENT ON COLUMN base_config.c_key IS '系统配置键名';COMMENT ON COLUMN base_config.c_cid IS '系统配置分类ID';COMMENT ON COLUMN base_config.c_type IS '系统配置类型，默认varchar';COMMENT ON COLUMN base_config.c_value IS 'varchar类型值';COMMENT ON COLUMN base_config.c_json IS 'json类型值';COMMENT ON COLUMN base_config.description IS '系统配置说明';TRUNCATE TABLE base_config;INSERT INTO base_config(c_key, c_cid, c_value, description) VALUES ('title', 2, '站点名称', '站点名称');INSERT INTO base_config(c_key, c_cid, c_value, description) VALUES ('description', 2, '站点描述', '站点描述');INSERT INTO base_config(c_key, c_cid, c_value, description) VALUES ('register_is_smscode', 2, 'false', '用户注册时是否通过短信验证');INSERT INTO base_config(c_key, c_cid, c_value, description) VALUES ('forgot_password_is_smscode', 2, 'false', '用户忘记密码时是否通过短信验证');INSERT INTO base_config(c_key, c_cid, c_value, description) VALUES ('set_password_is_smscode', 2, 'false', '用户重置密码时是否通过短信验证');INSERT INTO base_config(c_key, c_cid, c_value, description) VALUES ('change_mobile_is_smscode', 2, 'false', '用户变更手机号码时是否通过短信验证');DROP TYPE IF EXISTS smscode_status;CREATE TYPE smscode_status AS ENUM('send', 'fail', 'pass', 'timeout');DROP TABLE IF EXISTS base_ailiyun_smscode;CREATE TABLE base_ailiyun_smscode(	id SERIAL8,	uid INTEGER DEFAULT 0,	mobile VARCHAR(11) NOT NULL,	usefor VARCHAR(20) DEFAULT 'register',	code VARCHAR(20) NOT NULL,	recip CIDR NOT NULL,	request_id VARCHAR(36) NOT NULL,	res_code VARCHAR(200) NOT NULL,	res_message VARCHAR(200) NOT NULL,	biz_id VARCHAR(64) DEFAULT NULL,	datetime TIMESTAMP(3) WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),	status smscode_status DEFAULT 'send');COMMENT ON TABLE base_ailiyun_smscode IS 'socket链接用户数据表';COMMENT ON COLUMN base_ailiyun_smscode.id IS '自增主键';COMMENT ON COLUMN base_ailiyun_smscode.uid IS '用户UID';COMMENT ON COLUMN base_ailiyun_smscode.mobile IS '发送手机号码';COMMENT ON COLUMN base_ailiyun_smscode.usefor IS '发送类型';COMMENT ON COLUMN base_ailiyun_smscode.code IS '短信验证码';COMMENT ON COLUMN base_ailiyun_smscode.recip IS '请求IP';COMMENT ON COLUMN base_ailiyun_smscode.request_id IS '请求ID';COMMENT ON COLUMN base_ailiyun_smscode.res_code IS '请求状态码';COMMENT ON COLUMN base_ailiyun_smscode.res_message IS '请求状态码描述';COMMENT ON COLUMN base_ailiyun_smscode.biz_id IS '发送回执ID';COMMENT ON COLUMN base_ailiyun_smscode.datetime IS '短信发送时间';COMMENT ON COLUMN base_ailiyun_smscode.status IS '状态';DROP FUNCTION IF EXISTS fun_urlencode(TEXT);CREATE OR REPLACE FUNCTION func_urlencode(input TEXT)	RETURNS textIMMUTABLE STRICTAS $$DECLARE	parsed text;	safePattern text;BEGIN	safePattern = 'a-zA-Z0-9_~\-\.';	IF input ~ ('[^' || safePattern || ']') THEN		SELECT STRING_AGG(fragment, '')				INTO parsed		FROM (		     SELECT prefix || encoded AS fragment		     FROM (		          SELECT COALESCE(match[1], '') AS prefix,		                 COALESCE('%' || encode(match[2]::bytea, 'hex'), '') AS encoded		          FROM (		               SELECT regexp_matches(			                      input,			                      '([' || safePattern || ']*)([^' || safePattern || '])?',			                      'g') AS match		               ) matches		          ) parsed		     ) fragments;		RETURN parsed;	ELSE		RETURN input;	END IF;END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION func_urlencode(TEXT) IS '字符串urlencode编码函数';DROP FUNCTION IF EXISTS logic_ailiyun_smscode(JSON);CREATE OR REPLACE FUNCTION logic_ailiyun_smscode(	IN sms JSON)RETURNS JSONAS $$DECLARE	config RECORD;	HTTPMethod VARCHAR(4);	Formats VARCHAR(4);	RegionId VARCHAR(20);	SignatureMethod VARCHAR(10);	SignatureVersion VARCHAR(5);	Versions VARCHAR(12);	AccessKeyId VARCHAR(50);	AccessKeySecret VARCHAR(200);	Actions VARCHAR(20) := 'SendSms';	signName VARCHAR(100);	templateCode VARCHAR(50);	TemplateParam VARCHAR(250) DEFAULT NULL;	usefor VARCHAR(20) DEFAULT 'register';	uuid UUID DEFAULT uuid_generate_v4();	code VARCHAR(6) DEFAULT '';	mobile VARCHAR(11);	sign_array_a VARCHAR(200)[];	sign_array_b VARCHAR(200)[];	StringToSign TEXT;	Signature TEXT;	executesql TEXT;	www_fdw_record RECORD;BEGIN	IF (json_extract_path_text(sms, 'usefor') IS NOT NULL) THEN		usefor := json_extract_path_text(sms, 'usefor');	END IF;	IF (json_extract_path_text(sms, 'uuid') IS NOT NULL) THEN		uuid := json_extract_path_text(sms, 'uuid');	END IF;	IF (json_extract_path_text(sms, 'code') IS NOT NULL) THEN		code := json_extract_path_text(sms, 'code');	ELSE		WHILE (length(code) < 6) LOOP			code := code || trunc(random() * (9 - 1 + 1) + 1);		END LOOP;	END IF;	IF (json_extract_path_text(sms, 'mobile') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '阿里云短信验证码操作失败!', 'error', '接收短信验证码的手机号码不能为空!', 'sqlstate', 230);	ELSE		IF (json_extract_path_text(sms, 'mobile') ~ '^1[3|4|5|7|8][0-9]\d{8}$') THEN			mobile := json_extract_path_text(sms, 'mobile');		ELSE			RETURN json_build_object('type', 'Error', 'message', '阿里云短信验证码操作失败!', 'error', '接收短信验证码的手机号码格式不正确!', 'sqlstate', 230);		END IF;	END IF;	SET TIME ZONE 'PRC';	FOR config IN SELECT c_key, c_value FROM base_config WHERE c_cid = 3 LOOP		CASE config.c_key			WHEN 'AccessKeyId' THEN AccessKeyId := config.c_value;			WHEN 'AccessKeySecret' THEN AccessKeySecret := config.c_value;			WHEN 'Format' THEN Formats := config.c_value;			WHEN 'RegionId' THEN RegionId := config.c_value;			WHEN 'SignName' THEN SignName := config.c_value;			WHEN 'SignatureMethod' THEN SignatureMethod := config.c_value;			WHEN 'SignatureVersion' THEN SignatureVersion := config.c_value;			WHEN 'templateCode' THEN templateCode := config.c_value;			WHEN 'Version' THEN Versions := config.c_value;			WHEN 'HTTPMethod' THEN HTTPMethod := config.c_value;		ELSE		END CASE;	END LOOP;	sign_array_a := ARRAY[	'AccessKeyId=' || fun_urlencode(AccessKeyId),	'Action=' || fun_urlencode(Actions),	'Format=' || fun_urlencode(Formats),	'PhoneNumbers=' || fun_urlencode(mobile),	'RegionId=' || fun_urlencode(RegionId),	'SignName=' || fun_urlencode(signName)	];	sign_array_b := ARRAY[	'SignatureMethod=' || fun_urlencode(SignatureMethod),	'SignatureNonce=' || uuid,	'SignatureVersion=' || fun_urlencode(SignatureVersion),	'Timestamp=' || fun_urlencode(CURRENT_DATE::VARCHAR || 'T' || LOCALTIME(0) || 'Z'),	'TemplateCode=' || fun_urlencode(templateCode),	'TemplateParam=' || fun_urlencode(TemplateParam),	'Version=' || fun_urlencode(Versions)	];	StringToSign := HTTPMethod || '&' || trim(both ' ' from fun_urlencode('/')) || '&';	StringToSign := StringToSign || array_to_string(array_cat(sign_array_a, sign_array_b), '&');	Signature := encode(hmac(trim(both ' ' from fun_urlencode(StringToSign)), AccessKeySecret || '&', 'sha1'), 'base64');	executesql := 'SELECT * INTO '|| www_fdw_record ||' FORM www_fdw_ailiyun_smscode WHERE ';	executesql := executesql || array_to_string(array_cat(array_cat(sign_array_a::TEXT[], ARRAY['Signature=' || Signature]), sign_array_b::TEXT[]), ', ');	-- RETURN json_build_object('StringToSign', StringToSign, 'Signature', Signature, 'executesql', executesql);	EXECUTE executesql;	INSERT INTO base_ailiyun_smscode (usefor, mobile, code, recip, request_id, res_code, res_message, biz_id) VALUES	(usefor, mobile, code, recip, www_fdw_record.RequestId, www_fdw_record.code, www_fdw_record.Message, www_fdw_record.biz_id);	RETURN json_build_object('usefor', usefor, 'uuid', uuid, 'code', code, 'mobile', mobile, 'request_id', www_fdw_record.RequestId);	EXCEPTION WHEN OTHERS THEN	RETURN json_build_object('type', 'Error', 'message', '阿里云短信验证码操作失败!', 'error', replace(SQLERRM, '"', '`'), 'sqlstate', SQLSTATE);END;$$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_ailiyun_smscode(JSON) IS '发送阿里云短信验证码逻辑';DROP FUNCTION IF EXISTS logic_verify_smscode(JSON);CREATE OR REPLACE FUNCTION logic_verify_smscode(	IN verify JSON)RETURNS JSONAS $b$DECLARE	request_id_val VARCHAR(36);	code_val VARCHAR(20);	verify_num SMALLINT;	codes VARCHAR(20);	datetimes TIMESTAMP(3);BEGIN	IF (json_extract_path_text(verify, 'request_id') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '发送短信验证码请求ID不能为空!', 'code', 230);	ELSE		request_id_val := json_extract_path_text(verify, 'request_id');	END IF;	IF (json_extract_path_text(verify, 'code') IS NULL) THEN		RETURN json_build_object('type', 'Error', 'message', '手机验证码不能为空!', 'code', 230);	ELSE		code_val := json_extract_path_text(verify, 'code');	END IF;	SELECT COUNT(*) INTO verify_num FROM base_ailiyun_smscode WHERE request_id = request_id_val AND status = 'send' AND res_code = 'OK';	IF(verify_num > 0) THEN		SELECT code, datetime INTO codes, datetimes FROM base_ailiyun_smscode WHERE request_id = request_id_val AND status = 'send' AND res_code = 'OK';		IF (((now() AT TIME ZONE 'CCT')::timestamp(3) - datetimes) > interval '10 mins') THEN			UPDATE base_ailiyun_smscode SET status = 'timeout' WHERE request_id = request_id_val;			RETURN json_build_object('type', 'Error', 'message', '手机验证码校验超时!', 'code', 230);		ELSE			IF(codes = code_val) THEN				UPDATE base_ailiyun_smscode SET status = 'pass' WHERE request_id = request_id_val;				RETURN json_build_object('type', 'Success', 'message', '手机验证码校验成功!', 'code', 200);			ELSE				UPDATE base_ailiyun_smscode SET status = 'fail' WHERE request_id = request_id_val;				RETURN json_build_object('type', 'Error', 'message', '手机验证码校验失败!', 'code', 230);			END IF;		END IF;	ELSE		RETURN json_build_object('type', 'Error', 'message', '短信验证码发送请求不正确!', 'code', 230);	END IF;END;$b$ LANGUAGE plpgsql;COMMENT ON FUNCTION logic_verify_smscode(JSON) IS '校验短信验证码操作';